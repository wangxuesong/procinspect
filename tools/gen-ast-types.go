//go:generate go run ../scripts/pkgreflect.go -nofuncs -novars -norecurs -noconsts -gofile=ast.gen.go ../pkg/semantic
package main

import (
	"bytes"
	"flag"
	"fmt"
	"go/format"
	"os"
	"path"
	"reflect"
	"sort"

	"procinspect/pkg/semantic"
)

var dir string

func main() {
	flag.StringVar(&dir, "dir", ".", "Directory of the generated .go file")
	flag.Parse()

	tuples := []struct {
		nodeType reflect.Type
		varName  string
		fileName string
	}{{reflect.TypeOf((*semantic.Node)(nil)).Elem(),
		"nodeTypes",
		"node_types.go",
	}, {reflect.TypeOf((*semantic.Declaration)(nil)).Elem(),
		"declTypes",
		"decl_types.go",
	}, {
		reflect.TypeOf((*semantic.Expr)(nil)).Elem(),
		"exprTypes",
		"expr_types.go",
	}, {
		reflect.TypeOf((*semantic.Statement)(nil)).Elem(),
		"stmtTypes",
		"stmt_types.go",
	},
	}

	for _, t := range tuples {
		generalTypesFile(t.nodeType, t.varName, t.fileName)
	}
}

func generalTypesFile(nodeType reflect.Type, varName string, fileName string) {
	names := make([]string, 0)

	for name, t := range AstTypes {
		if t.Kind() == reflect.Struct && reflect.PtrTo(t).Implements(nodeType) {
			names = append(names, name)
		}
	}

	sort.Strings(names)
	var buf bytes.Buffer
	buf.WriteString("package main\n")
	buf.WriteString(fmt.Sprintf("var %s = Types{", varName))
	for _, n := range names {
		buf.WriteString(fmt.Sprintf("{\n"))
		buf.WriteString(fmt.Sprintf("Name:\"%s\",\n", n))
		buf.WriteString(fmt.Sprintf("Fields:\"%s.%s\",\n", "semantic", n))
		buf.WriteString(fmt.Sprintf("Comment:\"\",\n"))
		buf.WriteString(fmt.Sprintf("},"))
	}
	buf.WriteString(fmt.Sprintf("}\n"))

	// format the generated code
	formatted, err := format.Source(buf.Bytes())
	if err != nil {
		err = fmt.Errorf("gofmt generated code: %w", err)
		return
	}
	buf.Reset()
	buf.Write(formatted)

	// 生成文件路径
	filepath := path.Join(dir, fileName)
	// write the generated code
	err = os.WriteFile(filepath, buf.Bytes(), 0644)
	if err != nil {
		panic(err)
	}
}

// 下面的代码是自动生成的
// Code generated by scripts/pkgreflect.go DO NOT EDIT.
var AstTypes = map[string]reflect.Type{
	"AliasExpression":                   reflect.TypeOf((*semantic.AliasExpression)(nil)).Elem(),
	"Argument":                          reflect.TypeOf((*semantic.Argument)(nil)).Elem(),
	"AssignmentStatement":               reflect.TypeOf((*semantic.AssignmentStatement)(nil)).Elem(),
	"AstNode":                           reflect.TypeOf((*semantic.AstNode)(nil)).Elem(),
	"AutonomousTransactionDeclaration":  reflect.TypeOf((*semantic.AutonomousTransactionDeclaration)(nil)).Elem(),
	"BetweenExpression":                 reflect.TypeOf((*semantic.BetweenExpression)(nil)).Elem(),
	"BinaryExpression":                  reflect.TypeOf((*semantic.BinaryExpression)(nil)).Elem(),
	"BindNameExpression":                reflect.TypeOf((*semantic.BindNameExpression)(nil)).Elem(),
	"BlockStatement":                    reflect.TypeOf((*semantic.BlockStatement)(nil)).Elem(),
	"Body":                              reflect.TypeOf((*semantic.Body)(nil)).Elem(),
	"CaseWhenBlock":                     reflect.TypeOf((*semantic.CaseWhenBlock)(nil)).Elem(),
	"CaseWhenStatement":                 reflect.TypeOf((*semantic.CaseWhenStatement)(nil)).Elem(),
	"CastExpression":                    reflect.TypeOf((*semantic.CastExpression)(nil)).Elem(),
	"CloseStatement":                    reflect.TypeOf((*semantic.CloseStatement)(nil)).Elem(),
	"CommitStatement":                   reflect.TypeOf((*semantic.CommitStatement)(nil)).Elem(),
	"CommonTableExpression":             reflect.TypeOf((*semantic.CommonTableExpression)(nil)).Elem(),
	"CompoundTriggerBlock":              reflect.TypeOf((*semantic.CompoundTriggerBlock)(nil)).Elem(),
	"ContinueStatement":                 reflect.TypeOf((*semantic.ContinueStatement)(nil)).Elem(),
	"CreateCompoundDmlTriggerStatement": reflect.TypeOf((*semantic.CreateCompoundDmlTriggerStatement)(nil)).Elem(),
	"CreateFunctionStatement":           reflect.TypeOf((*semantic.CreateFunctionStatement)(nil)).Elem(),
	"CreateNestTableStatement":          reflect.TypeOf((*semantic.CreateNestTableStatement)(nil)).Elem(),
	"CreatePackageBodyStatement":        reflect.TypeOf((*semantic.CreatePackageBodyStatement)(nil)).Elem(),
	"CreatePackageStatement":            reflect.TypeOf((*semantic.CreatePackageStatement)(nil)).Elem(),
	"CreateProcedureStatement":          reflect.TypeOf((*semantic.CreateProcedureStatement)(nil)).Elem(),
	"CreateSimpleDmlTriggerStatement":   reflect.TypeOf((*semantic.CreateSimpleDmlTriggerStatement)(nil)).Elem(),
	"CreateSynonymStatement":            reflect.TypeOf((*semantic.CreateSynonymStatement)(nil)).Elem(),
	"CreateTriggerStatement":            reflect.TypeOf((*semantic.CreateTriggerStatement)(nil)).Elem(),
	"CreateTypeStatement":               reflect.TypeOf((*semantic.CreateTypeStatement)(nil)).Elem(),
	"CursorAttribute":                   reflect.TypeOf((*semantic.CursorAttribute)(nil)).Elem(),
	"CursorDeclaration":                 reflect.TypeOf((*semantic.CursorDeclaration)(nil)).Elem(),
	"Declaration":                       reflect.TypeOf((*semantic.Declaration)(nil)).Elem(),
	"DeleteStatement":                   reflect.TypeOf((*semantic.DeleteStatement)(nil)).Elem(),
	"DotExpression":                     reflect.TypeOf((*semantic.DotExpression)(nil)).Elem(),
	"DropFunctionStatement":             reflect.TypeOf((*semantic.DropFunctionStatement)(nil)).Elem(),
	"DropPackageStatement":              reflect.TypeOf((*semantic.DropPackageStatement)(nil)).Elem(),
	"DropProcedureStatement":            reflect.TypeOf((*semantic.DropProcedureStatement)(nil)).Elem(),
	"DropTriggerStatement":              reflect.TypeOf((*semantic.DropTriggerStatement)(nil)).Elem(),
	"ElseBlock":                         reflect.TypeOf((*semantic.ElseBlock)(nil)).Elem(),
	"ExceptionDeclaration":              reflect.TypeOf((*semantic.ExceptionDeclaration)(nil)).Elem(),
	"ExecuteImmediateStatement":         reflect.TypeOf((*semantic.ExecuteImmediateStatement)(nil)).Elem(),
	"ExistsExpression":                  reflect.TypeOf((*semantic.ExistsExpression)(nil)).Elem(),
	"ExitStatement":                     reflect.TypeOf((*semantic.ExitStatement)(nil)).Elem(),
	"Expr":                              reflect.TypeOf((*semantic.Expr)(nil)).Elem(),
	"ExprListExpression":                reflect.TypeOf((*semantic.ExprListExpression)(nil)).Elem(),
	"ExprVisitor":                       reflect.TypeOf((*semantic.ExprVisitor)(nil)).Elem(),
	"Expression":                        reflect.TypeOf((*semantic.Expression)(nil)).Elem(),
	"FetchStatement":                    reflect.TypeOf((*semantic.FetchStatement)(nil)).Elem(),
	"FieldList":                         reflect.TypeOf((*semantic.FieldList)(nil)).Elem(),
	"ForUpdateClause":                   reflect.TypeOf((*semantic.ForUpdateClause)(nil)).Elem(),
	"ForUpdateOptionsExpression":        reflect.TypeOf((*semantic.ForUpdateOptionsExpression)(nil)).Elem(),
	"FromClause":                        reflect.TypeOf((*semantic.FromClause)(nil)).Elem(),
	"FunctionCallExpression":            reflect.TypeOf((*semantic.FunctionCallExpression)(nil)).Elem(),
	"FunctionDeclaration":               reflect.TypeOf((*semantic.FunctionDeclaration)(nil)).Elem(),
	"GotoStatement":                     reflect.TypeOf((*semantic.GotoStatement)(nil)).Elem(),
	"IfStatement":                       reflect.TypeOf((*semantic.IfStatement)(nil)).Elem(),
	"InExpression":                      reflect.TypeOf((*semantic.InExpression)(nil)).Elem(),
	"InsertIntoClause":                  reflect.TypeOf((*semantic.InsertIntoClause)(nil)).Elem(),
	"InsertStatement":                   reflect.TypeOf((*semantic.InsertStatement)(nil)).Elem(),
	"IntoClause":                        reflect.TypeOf((*semantic.IntoClause)(nil)).Elem(),
	"LabelDeclaration":                  reflect.TypeOf((*semantic.LabelDeclaration)(nil)).Elem(),
	"LikeExpression":                    reflect.TypeOf((*semantic.LikeExpression)(nil)).Elem(),
	"ListaggExpression":                 reflect.TypeOf((*semantic.ListaggExpression)(nil)).Elem(),
	"LoopStatement":                     reflect.TypeOf((*semantic.LoopStatement)(nil)).Elem(),
	"MergeInsertStatement":              reflect.TypeOf((*semantic.MergeInsertStatement)(nil)).Elem(),
	"MergeStatement":                    reflect.TypeOf((*semantic.MergeStatement)(nil)).Elem(),
	"MergeUpdateStatement":              reflect.TypeOf((*semantic.MergeUpdateStatement)(nil)).Elem(),
	"NameExpression":                    reflect.TypeOf((*semantic.NameExpression)(nil)).Elem(),
	"NamedArgumentExpression":           reflect.TypeOf((*semantic.NamedArgumentExpression)(nil)).Elem(),
	"NestTableTypeDeclaration":          reflect.TypeOf((*semantic.NestTableTypeDeclaration)(nil)).Elem(),
	"Node":                              reflect.TypeOf((*semantic.Node)(nil)).Elem(),
	"NodeType":                          reflect.TypeOf((*semantic.NodeType)(nil)).Elem(),
	"NodeVisitor":                       reflect.TypeOf((*semantic.NodeVisitor)(nil)).Elem(),
	"NullExpression":                    reflect.TypeOf((*semantic.NullExpression)(nil)).Elem(),
	"NullStatement":                     reflect.TypeOf((*semantic.NullStatement)(nil)).Elem(),
	"NumericLiteral":                    reflect.TypeOf((*semantic.NumericLiteral)(nil)).Elem(),
	"OpenForStatement":                  reflect.TypeOf((*semantic.OpenForStatement)(nil)).Elem(),
	"OpenStatement":                     reflect.TypeOf((*semantic.OpenStatement)(nil)).Elem(),
	"OrderByClause":                     reflect.TypeOf((*semantic.OrderByClause)(nil)).Elem(),
	"OrderByElement":                    reflect.TypeOf((*semantic.OrderByElement)(nil)).Elem(),
	"OuterJoinExpression":               reflect.TypeOf((*semantic.OuterJoinExpression)(nil)).Elem(),
	"Parameter":                         reflect.TypeOf((*semantic.Parameter)(nil)).Elem(),
	"ProcedureCall":                     reflect.TypeOf((*semantic.ProcedureCall)(nil)).Elem(),
	"QueryExpression":                   reflect.TypeOf((*semantic.QueryExpression)(nil)).Elem(),
	"RaiseStatement":                    reflect.TypeOf((*semantic.RaiseStatement)(nil)).Elem(),
	"RelationalExpression":              reflect.TypeOf((*semantic.RelationalExpression)(nil)).Elem(),
	"ReturnStatement":                   reflect.TypeOf((*semantic.ReturnStatement)(nil)).Elem(),
	"RollbackStatement":                 reflect.TypeOf((*semantic.RollbackStatement)(nil)).Elem(),
	"Script":                            reflect.TypeOf((*semantic.Script)(nil)).Elem(),
	"SelectField":                       reflect.TypeOf((*semantic.SelectField)(nil)).Elem(),
	"SelectStatement":                   reflect.TypeOf((*semantic.SelectStatement)(nil)).Elem(),
	"SetOperationStatement":             reflect.TypeOf((*semantic.SetOperationStatement)(nil)).Elem(),
	"SetOperator":                       reflect.TypeOf((*semantic.SetOperator)(nil)).Elem(),
	"SetPosition":                       reflect.TypeOf((*semantic.SetPosition)(nil)).Elem(),
	"SignExpression":                    reflect.TypeOf((*semantic.SignExpression)(nil)).Elem(),
	"Span":                              reflect.TypeOf((*semantic.Span)(nil)).Elem(),
	"Statement":                         reflect.TypeOf((*semantic.Statement)(nil)).Elem(),
	"StatementDepth":                    reflect.TypeOf((*semantic.StatementDepth)(nil)).Elem(),
	"StatementExpression":               reflect.TypeOf((*semantic.StatementExpression)(nil)).Elem(),
	"Stmt":                              reflect.TypeOf((*semantic.Stmt)(nil)).Elem(),
	"StmtVisitor":                       reflect.TypeOf((*semantic.StmtVisitor)(nil)).Elem(),
	"StringLiteral":                     reflect.TypeOf((*semantic.StringLiteral)(nil)).Elem(),
	"StubExprVisitor":                   reflect.TypeOf((*semantic.StubExprVisitor)(nil)).Elem(),
	"StubNodeVisitor":                   reflect.TypeOf((*semantic.StubNodeVisitor)(nil)).Elem(),
	"StubStmtVisitor":                   reflect.TypeOf((*semantic.StubStmtVisitor)(nil)).Elem(),
	"TableRef":                          reflect.TypeOf((*semantic.TableRef)(nil)).Elem(),
	"TimingPoint":                       reflect.TypeOf((*semantic.TimingPoint)(nil)).Elem(),
	"TriggerBlock":                      reflect.TypeOf((*semantic.TriggerBlock)(nil)).Elem(),
	"TriggerBody":                       reflect.TypeOf((*semantic.TriggerBody)(nil)).Elem(),
	"TriggerEvent":                      reflect.TypeOf((*semantic.TriggerEvent)(nil)).Elem(),
	"UnaryLogicalExpression":            reflect.TypeOf((*semantic.UnaryLogicalExpression)(nil)).Elem(),
	"UpdateStatement":                   reflect.TypeOf((*semantic.UpdateStatement)(nil)).Elem(),
	"UsingClause":                       reflect.TypeOf((*semantic.UsingClause)(nil)).Elem(),
	"UsingElement":                      reflect.TypeOf((*semantic.UsingElement)(nil)).Elem(),
	"VariableDeclaration":               reflect.TypeOf((*semantic.VariableDeclaration)(nil)).Elem(),
	"WildCardField":                     reflect.TypeOf((*semantic.WildCardField)(nil)).Elem(),
	"WithClause":                        reflect.TypeOf((*semantic.WithClause)(nil)).Elem(),
}
