package parser

// Code generated by ../../../peg/peg -switch -inline -strict -output grammer.peg.go grammer.peg DO NOT EDIT.

import (
	"bytes"
	"fmt"
	"io"
	"os"
	"sort"
	"strconv"
)

const endSymbol rune = 1114112

/* The rule types inferred from the grammar are below. */
type pegRule uint8

const (
	ruleUnknown pegRule = iota
	ruleUnit
	ruleStatement
	ruleCreatePackageDeclaration
	rulePackageName
	ruleCreateProcedureDeclaration
	ruleProcedureHeader
	ruleProcedureDeclarationBlock
	ruleDeclarationItem
	ruleVariableDeclaration
	ruleProcedureBody
	ruleProcedureName
	ruleTypeSpecifier
	ruleIdentifier
	ruleLetter
	ruleSpacing
	ruleLetterOrDigit
	ruleKeyword
	ruleCREATE
	ruleOR
	ruleREPLACE
	rulePACKAGE
	ruleIS
	ruleBEGIN
	ruleEND
	rulePROCEDURE
	ruleINTEGER
	ruleVARCHAR
	ruleVARCHAR2
	ruleSEMI
	ruleEOT
)

var rul3s = [...]string{
	"Unknown",
	"Unit",
	"Statement",
	"CreatePackageDeclaration",
	"PackageName",
	"CreateProcedureDeclaration",
	"ProcedureHeader",
	"ProcedureDeclarationBlock",
	"DeclarationItem",
	"VariableDeclaration",
	"ProcedureBody",
	"ProcedureName",
	"TypeSpecifier",
	"Identifier",
	"Letter",
	"Spacing",
	"LetterOrDigit",
	"Keyword",
	"CREATE",
	"OR",
	"REPLACE",
	"PACKAGE",
	"IS",
	"BEGIN",
	"END",
	"PROCEDURE",
	"INTEGER",
	"VARCHAR",
	"VARCHAR2",
	"SEMI",
	"EOT",
}

type token32 struct {
	pegRule
	begin, end uint32
}

func (t *token32) String() string {
	return fmt.Sprintf("\x1B[34m%v\x1B[m %v %v", rul3s[t.pegRule], t.begin, t.end)
}

type node32 struct {
	token32
	up, next *node32
}

func (node *node32) print(w io.Writer, pretty bool, buffer string) {
	var print func(node *node32, depth int)
	print = func(node *node32, depth int) {
		for node != nil {
			for c := 0; c < depth; c++ {
				fmt.Fprintf(w, " ")
			}
			rule := rul3s[node.pegRule]
			quote := strconv.Quote(string(([]rune(buffer)[node.begin:node.end])))
			if !pretty {
				fmt.Fprintf(w, "%v %v\n", rule, quote)
			} else {
				fmt.Fprintf(w, "\x1B[36m%v\x1B[m %v\n", rule, quote)
			}
			if node.up != nil {
				print(node.up, depth+1)
			}
			node = node.next
		}
	}
	print(node, 0)
}

func (node *node32) Print(w io.Writer, buffer string) {
	node.print(w, false, buffer)
}

func (node *node32) PrettyPrint(w io.Writer, buffer string) {
	node.print(w, true, buffer)
}

type tokens32 struct {
	tree []token32
}

func (t *tokens32) Trim(length uint32) {
	t.tree = t.tree[:length]
}

func (t *tokens32) Print() {
	for _, token := range t.tree {
		fmt.Println(token.String())
	}
}

func (t *tokens32) AST() *node32 {
	type element struct {
		node *node32
		down *element
	}
	tokens := t.Tokens()
	var stack *element
	for _, token := range tokens {
		if token.begin == token.end {
			continue
		}
		node := &node32{token32: token}
		for stack != nil && stack.node.begin >= token.begin && stack.node.end <= token.end {
			stack.node.next = node.up
			node.up = stack.node
			stack = stack.down
		}
		stack = &element{node: node, down: stack}
	}
	if stack != nil {
		return stack.node
	}
	return nil
}

func (t *tokens32) PrintSyntaxTree(buffer string) {
	t.AST().Print(os.Stdout, buffer)
}

func (t *tokens32) WriteSyntaxTree(w io.Writer, buffer string) {
	t.AST().Print(w, buffer)
}

func (t *tokens32) PrettyPrintSyntaxTree(buffer string) {
	t.AST().PrettyPrint(os.Stdout, buffer)
}

func (t *tokens32) Add(rule pegRule, begin, end, index uint32) {
	tree, i := t.tree, int(index)
	if i >= len(tree) {
		t.tree = append(tree, token32{pegRule: rule, begin: begin, end: end})
		return
	}
	tree[i] = token32{pegRule: rule, begin: begin, end: end}
}

func (t *tokens32) Tokens() []token32 {
	return t.tree
}

type SqlParser struct {
	Buffer         string
	buffer         []rune
	rules          [31]func() bool
	parse          func(rule ...int) error
	reset          func()
	Pretty         bool
	disableMemoize bool
	tokens32
}

func (p *SqlParser) Parse(rule ...int) error {
	return p.parse(rule...)
}

func (p *SqlParser) Reset() {
	p.reset()
}

type textPosition struct {
	line, symbol int
}

type textPositionMap map[int]textPosition

func translatePositions(buffer []rune, positions []int) textPositionMap {
	length, translations, j, line, symbol := len(positions), make(textPositionMap, len(positions)), 0, 1, 0
	sort.Ints(positions)

search:
	for i, c := range buffer {
		if c == '\n' {
			line, symbol = line+1, 0
		} else {
			symbol++
		}
		if i == positions[j] {
			translations[positions[j]] = textPosition{line, symbol}
			for j++; j < length; j++ {
				if i != positions[j] {
					continue search
				}
			}
			break search
		}
	}

	return translations
}

type parseError struct {
	p   *SqlParser
	max token32
}

func (e *parseError) Error() string {
	tokens, err := []token32{e.max}, "\n"
	positions, p := make([]int, 2*len(tokens)), 0
	for _, token := range tokens {
		positions[p], p = int(token.begin), p+1
		positions[p], p = int(token.end), p+1
	}
	translations := translatePositions(e.p.buffer, positions)
	format := "parse error near %v (line %v symbol %v - line %v symbol %v):\n%v\n"
	if e.p.Pretty {
		format = "parse error near \x1B[34m%v\x1B[m (line %v symbol %v - line %v symbol %v):\n%v\n"
	}
	for _, token := range tokens {
		begin, end := int(token.begin), int(token.end)
		err += fmt.Sprintf(format,
			rul3s[token.pegRule],
			translations[begin].line, translations[begin].symbol,
			translations[end].line, translations[end].symbol,
			strconv.Quote(string(e.p.buffer[begin:end])))
	}

	return err
}

func (p *SqlParser) PrintSyntaxTree() {
	if p.Pretty {
		p.tokens32.PrettyPrintSyntaxTree(p.Buffer)
	} else {
		p.tokens32.PrintSyntaxTree(p.Buffer)
	}
}

func (p *SqlParser) WriteSyntaxTree(w io.Writer) {
	p.tokens32.WriteSyntaxTree(w, p.Buffer)
}

func (p *SqlParser) SprintSyntaxTree() string {
	var b bytes.Buffer
	p.WriteSyntaxTree(&b)
	return b.String()
}

func Pretty(pretty bool) func(*SqlParser) error {
	return func(p *SqlParser) error {
		p.Pretty = pretty
		return nil
	}
}

func Size(size int) func(*SqlParser) error {
	return func(p *SqlParser) error {
		p.tokens32 = tokens32{tree: make([]token32, 0, size)}
		return nil
	}
}

func DisableMemoize() func(*SqlParser) error {
	return func(p *SqlParser) error {
		p.disableMemoize = true
		return nil
	}
}

type memo struct {
	Matched bool
	Partial []token32
}

type memoKey struct {
	Rule     uint32
	Position uint32
}

func (p *SqlParser) Init(options ...func(*SqlParser) error) error {
	var (
		max                  token32
		position, tokenIndex uint32
		buffer               []rune
		memoization          map[memoKey]memo
	)
	for _, option := range options {
		err := option(p)
		if err != nil {
			return err
		}
	}
	p.reset = func() {
		max = token32{}
		position, tokenIndex = 0, 0
		memoization = make(map[memoKey]memo)
		p.buffer = []rune(p.Buffer)
		if len(p.buffer) == 0 || p.buffer[len(p.buffer)-1] != endSymbol {
			p.buffer = append(p.buffer, endSymbol)
		}
		buffer = p.buffer
	}
	p.reset()

	_rules := p.rules
	tree := p.tokens32
	p.parse = func(rule ...int) error {
		r := 1
		if len(rule) > 0 {
			r = rule[0]
		}
		matches := p.rules[r]()
		p.tokens32 = tree
		if matches {
			p.Trim(tokenIndex)
			return nil
		}
		return &parseError{p, max}
	}

	add := func(rule pegRule, begin uint32) {
		tree.Add(rule, begin, position, tokenIndex)
		tokenIndex++
		if begin != position && position > max.end {
			max = token32{rule, begin, position}
		}
	}

	memoize := func(rule uint32, begin uint32, tokenIndexStart uint32, matched bool) {
		if p.disableMemoize {
			return
		}
		key := memoKey{rule, begin}
		if !matched {
			memoization[key] = memo{Matched: false}
		} else {
			t := tree.tree[tokenIndexStart:tokenIndex]
			tokenCopy := make([]token32, len(t))
			copy(tokenCopy, t)
			memoization[key] = memo{Matched: true, Partial: tokenCopy}
		}
	}

	memoizedResult := func(m memo) bool {
		if !m.Matched {
			return false
		}
		tree.tree = append(tree.tree[:tokenIndex], m.Partial...)
		tokenIndex += uint32(len(m.Partial))
		position = m.Partial[len(m.Partial)-1].end
		if tree.tree[tokenIndex-1].begin != position && position > max.end {
			max = tree.tree[tokenIndex-1]
		}
		return true
	}

	matchDot := func() bool {
		if buffer[position] != endSymbol {
			position++
			return true
		}
		return false
	}

	/*matchChar := func(c byte) bool {
		if buffer[position] == c {
			position++
			return true
		}
		return false
	}*/

	/*matchRange := func(lower byte, upper byte) bool {
		if c := buffer[position]; c >= lower && c <= upper {
			position++
			return true
		}
		return false
	}*/

	_rules = [...]func() bool{
		nil,
		/* 0 Unit <- <(Spacing Statement* EOT)> */
		func() bool {
			if memoized, ok := memoization[memoKey{0, position}]; ok {
				return memoizedResult(memoized)
			}
			position0, tokenIndex0 := position, tokenIndex
			{
				position1 := position
				if !_rules[ruleSpacing]() {
					goto l0
				}
			l2:
				{
					position3, tokenIndex3 := position, tokenIndex
					{
						position4 := position
						{
							position5, tokenIndex5 := position, tokenIndex
							{
								position7 := position
								if !_rules[ruleCREATE]() {
									goto l6
								}
								{
									position8, tokenIndex8 := position, tokenIndex
									if !_rules[ruleOR]() {
										goto l8
									}
									if !_rules[ruleREPLACE]() {
										goto l8
									}
									goto l9
								l8:
									position, tokenIndex = position8, tokenIndex8
								}
							l9:
								{
									position10 := position
									{
										position11, tokenIndex11 := position, tokenIndex
										if buffer[position] != rune('p') {
											goto l12
										}
										position++
										goto l11
									l12:
										position, tokenIndex = position11, tokenIndex11
										if buffer[position] != rune('P') {
											goto l6
										}
										position++
									}
								l11:
									{
										position13, tokenIndex13 := position, tokenIndex
										if buffer[position] != rune('a') {
											goto l14
										}
										position++
										goto l13
									l14:
										position, tokenIndex = position13, tokenIndex13
										if buffer[position] != rune('A') {
											goto l6
										}
										position++
									}
								l13:
									{
										position15, tokenIndex15 := position, tokenIndex
										if buffer[position] != rune('c') {
											goto l16
										}
										position++
										goto l15
									l16:
										position, tokenIndex = position15, tokenIndex15
										if buffer[position] != rune('C') {
											goto l6
										}
										position++
									}
								l15:
									{
										position17, tokenIndex17 := position, tokenIndex
										if buffer[position] != rune('k') {
											goto l18
										}
										position++
										goto l17
									l18:
										position, tokenIndex = position17, tokenIndex17
										if buffer[position] != rune('K') {
											goto l6
										}
										position++
									}
								l17:
									{
										position19, tokenIndex19 := position, tokenIndex
										if buffer[position] != rune('a') {
											goto l20
										}
										position++
										goto l19
									l20:
										position, tokenIndex = position19, tokenIndex19
										if buffer[position] != rune('A') {
											goto l6
										}
										position++
									}
								l19:
									{
										position21, tokenIndex21 := position, tokenIndex
										if buffer[position] != rune('g') {
											goto l22
										}
										position++
										goto l21
									l22:
										position, tokenIndex = position21, tokenIndex21
										if buffer[position] != rune('G') {
											goto l6
										}
										position++
									}
								l21:
									{
										position23, tokenIndex23 := position, tokenIndex
										if buffer[position] != rune('e') {
											goto l24
										}
										position++
										goto l23
									l24:
										position, tokenIndex = position23, tokenIndex23
										if buffer[position] != rune('E') {
											goto l6
										}
										position++
									}
								l23:
									{
										position25, tokenIndex25 := position, tokenIndex
										if !_rules[ruleLetterOrDigit]() {
											goto l25
										}
										goto l6
									l25:
										position, tokenIndex = position25, tokenIndex25
									}
									if !_rules[ruleSpacing]() {
										goto l6
									}
									add(rulePACKAGE, position10)
								}
								{
									position26 := position
									if !_rules[ruleIdentifier]() {
										goto l6
									}
									add(rulePackageName, position26)
								}
								if !_rules[ruleIS]() {
									goto l6
								}
								if !_rules[ruleEND]() {
									goto l6
								}
								if !_rules[ruleSEMI]() {
									goto l6
								}
								add(ruleCreatePackageDeclaration, position7)
							}
							goto l5
						l6:
							position, tokenIndex = position5, tokenIndex5
							{
								position27 := position
								if !_rules[ruleCREATE]() {
									goto l3
								}
								{
									position28, tokenIndex28 := position, tokenIndex
									if !_rules[ruleOR]() {
										goto l28
									}
									if !_rules[ruleREPLACE]() {
										goto l28
									}
									goto l29
								l28:
									position, tokenIndex = position28, tokenIndex28
								}
							l29:
								{
									position30 := position
									{
										position31 := position
										{
											position32, tokenIndex32 := position, tokenIndex
											if buffer[position] != rune('p') {
												goto l33
											}
											position++
											goto l32
										l33:
											position, tokenIndex = position32, tokenIndex32
											if buffer[position] != rune('P') {
												goto l3
											}
											position++
										}
									l32:
										{
											position34, tokenIndex34 := position, tokenIndex
											if buffer[position] != rune('r') {
												goto l35
											}
											position++
											goto l34
										l35:
											position, tokenIndex = position34, tokenIndex34
											if buffer[position] != rune('R') {
												goto l3
											}
											position++
										}
									l34:
										{
											position36, tokenIndex36 := position, tokenIndex
											if buffer[position] != rune('o') {
												goto l37
											}
											position++
											goto l36
										l37:
											position, tokenIndex = position36, tokenIndex36
											if buffer[position] != rune('O') {
												goto l3
											}
											position++
										}
									l36:
										{
											position38, tokenIndex38 := position, tokenIndex
											if buffer[position] != rune('c') {
												goto l39
											}
											position++
											goto l38
										l39:
											position, tokenIndex = position38, tokenIndex38
											if buffer[position] != rune('C') {
												goto l3
											}
											position++
										}
									l38:
										{
											position40, tokenIndex40 := position, tokenIndex
											if buffer[position] != rune('e') {
												goto l41
											}
											position++
											goto l40
										l41:
											position, tokenIndex = position40, tokenIndex40
											if buffer[position] != rune('E') {
												goto l3
											}
											position++
										}
									l40:
										{
											position42, tokenIndex42 := position, tokenIndex
											if buffer[position] != rune('d') {
												goto l43
											}
											position++
											goto l42
										l43:
											position, tokenIndex = position42, tokenIndex42
											if buffer[position] != rune('D') {
												goto l3
											}
											position++
										}
									l42:
										{
											position44, tokenIndex44 := position, tokenIndex
											if buffer[position] != rune('u') {
												goto l45
											}
											position++
											goto l44
										l45:
											position, tokenIndex = position44, tokenIndex44
											if buffer[position] != rune('U') {
												goto l3
											}
											position++
										}
									l44:
										{
											position46, tokenIndex46 := position, tokenIndex
											if buffer[position] != rune('r') {
												goto l47
											}
											position++
											goto l46
										l47:
											position, tokenIndex = position46, tokenIndex46
											if buffer[position] != rune('R') {
												goto l3
											}
											position++
										}
									l46:
										{
											position48, tokenIndex48 := position, tokenIndex
											if buffer[position] != rune('e') {
												goto l49
											}
											position++
											goto l48
										l49:
											position, tokenIndex = position48, tokenIndex48
											if buffer[position] != rune('E') {
												goto l3
											}
											position++
										}
									l48:
										{
											position50, tokenIndex50 := position, tokenIndex
											if !_rules[ruleLetterOrDigit]() {
												goto l50
											}
											goto l3
										l50:
											position, tokenIndex = position50, tokenIndex50
										}
										if !_rules[ruleSpacing]() {
											goto l3
										}
										add(rulePROCEDURE, position31)
									}
									{
										position51 := position
										if !_rules[ruleIdentifier]() {
											goto l3
										}
										add(ruleProcedureName, position51)
									}
									add(ruleProcedureHeader, position30)
								}
								if !_rules[ruleIS]() {
									goto l3
								}
								{
									position52, tokenIndex52 := position, tokenIndex
									{
										position54 := position
										{
											position57 := position
											{
												position58 := position
												if !_rules[ruleIdentifier]() {
													goto l52
												}
												{
													position59 := position
													{
														position60, tokenIndex60 := position, tokenIndex
														{
															position62 := position
															{
																position63, tokenIndex63 := position, tokenIndex
																if buffer[position] != rune('i') {
																	goto l64
																}
																position++
																goto l63
															l64:
																position, tokenIndex = position63, tokenIndex63
																if buffer[position] != rune('I') {
																	goto l61
																}
																position++
															}
														l63:
															{
																position65, tokenIndex65 := position, tokenIndex
																if buffer[position] != rune('n') {
																	goto l66
																}
																position++
																goto l65
															l66:
																position, tokenIndex = position65, tokenIndex65
																if buffer[position] != rune('N') {
																	goto l61
																}
																position++
															}
														l65:
															{
																position67, tokenIndex67 := position, tokenIndex
																if buffer[position] != rune('t') {
																	goto l68
																}
																position++
																goto l67
															l68:
																position, tokenIndex = position67, tokenIndex67
																if buffer[position] != rune('T') {
																	goto l61
																}
																position++
															}
														l67:
															{
																position69, tokenIndex69 := position, tokenIndex
																if buffer[position] != rune('e') {
																	goto l70
																}
																position++
																goto l69
															l70:
																position, tokenIndex = position69, tokenIndex69
																if buffer[position] != rune('E') {
																	goto l61
																}
																position++
															}
														l69:
															{
																position71, tokenIndex71 := position, tokenIndex
																if buffer[position] != rune('g') {
																	goto l72
																}
																position++
																goto l71
															l72:
																position, tokenIndex = position71, tokenIndex71
																if buffer[position] != rune('G') {
																	goto l61
																}
																position++
															}
														l71:
															{
																position73, tokenIndex73 := position, tokenIndex
																if buffer[position] != rune('e') {
																	goto l74
																}
																position++
																goto l73
															l74:
																position, tokenIndex = position73, tokenIndex73
																if buffer[position] != rune('E') {
																	goto l61
																}
																position++
															}
														l73:
															{
																position75, tokenIndex75 := position, tokenIndex
																if buffer[position] != rune('r') {
																	goto l76
																}
																position++
																goto l75
															l76:
																position, tokenIndex = position75, tokenIndex75
																if buffer[position] != rune('R') {
																	goto l61
																}
																position++
															}
														l75:
															{
																position77, tokenIndex77 := position, tokenIndex
																if !_rules[ruleLetterOrDigit]() {
																	goto l77
																}
																goto l61
															l77:
																position, tokenIndex = position77, tokenIndex77
															}
															if !_rules[ruleSpacing]() {
																goto l61
															}
															add(ruleINTEGER, position62)
														}
														goto l60
													l61:
														position, tokenIndex = position60, tokenIndex60
														{
															position79 := position
															{
																position80, tokenIndex80 := position, tokenIndex
																if buffer[position] != rune('v') {
																	goto l81
																}
																position++
																goto l80
															l81:
																position, tokenIndex = position80, tokenIndex80
																if buffer[position] != rune('V') {
																	goto l78
																}
																position++
															}
														l80:
															{
																position82, tokenIndex82 := position, tokenIndex
																if buffer[position] != rune('a') {
																	goto l83
																}
																position++
																goto l82
															l83:
																position, tokenIndex = position82, tokenIndex82
																if buffer[position] != rune('A') {
																	goto l78
																}
																position++
															}
														l82:
															{
																position84, tokenIndex84 := position, tokenIndex
																if buffer[position] != rune('r') {
																	goto l85
																}
																position++
																goto l84
															l85:
																position, tokenIndex = position84, tokenIndex84
																if buffer[position] != rune('R') {
																	goto l78
																}
																position++
															}
														l84:
															{
																position86, tokenIndex86 := position, tokenIndex
																if buffer[position] != rune('c') {
																	goto l87
																}
																position++
																goto l86
															l87:
																position, tokenIndex = position86, tokenIndex86
																if buffer[position] != rune('C') {
																	goto l78
																}
																position++
															}
														l86:
															{
																position88, tokenIndex88 := position, tokenIndex
																if buffer[position] != rune('h') {
																	goto l89
																}
																position++
																goto l88
															l89:
																position, tokenIndex = position88, tokenIndex88
																if buffer[position] != rune('H') {
																	goto l78
																}
																position++
															}
														l88:
															{
																position90, tokenIndex90 := position, tokenIndex
																if buffer[position] != rune('a') {
																	goto l91
																}
																position++
																goto l90
															l91:
																position, tokenIndex = position90, tokenIndex90
																if buffer[position] != rune('A') {
																	goto l78
																}
																position++
															}
														l90:
															{
																position92, tokenIndex92 := position, tokenIndex
																if buffer[position] != rune('r') {
																	goto l93
																}
																position++
																goto l92
															l93:
																position, tokenIndex = position92, tokenIndex92
																if buffer[position] != rune('R') {
																	goto l78
																}
																position++
															}
														l92:
															{
																position94, tokenIndex94 := position, tokenIndex
																if !_rules[ruleLetterOrDigit]() {
																	goto l94
																}
																goto l78
															l94:
																position, tokenIndex = position94, tokenIndex94
															}
															if !_rules[ruleSpacing]() {
																goto l78
															}
															add(ruleVARCHAR, position79)
														}
														goto l60
													l78:
														position, tokenIndex = position60, tokenIndex60
														{
															position95 := position
															{
																position96, tokenIndex96 := position, tokenIndex
																if buffer[position] != rune('v') {
																	goto l97
																}
																position++
																goto l96
															l97:
																position, tokenIndex = position96, tokenIndex96
																if buffer[position] != rune('V') {
																	goto l52
																}
																position++
															}
														l96:
															{
																position98, tokenIndex98 := position, tokenIndex
																if buffer[position] != rune('a') {
																	goto l99
																}
																position++
																goto l98
															l99:
																position, tokenIndex = position98, tokenIndex98
																if buffer[position] != rune('A') {
																	goto l52
																}
																position++
															}
														l98:
															{
																position100, tokenIndex100 := position, tokenIndex
																if buffer[position] != rune('r') {
																	goto l101
																}
																position++
																goto l100
															l101:
																position, tokenIndex = position100, tokenIndex100
																if buffer[position] != rune('R') {
																	goto l52
																}
																position++
															}
														l100:
															{
																position102, tokenIndex102 := position, tokenIndex
																if buffer[position] != rune('c') {
																	goto l103
																}
																position++
																goto l102
															l103:
																position, tokenIndex = position102, tokenIndex102
																if buffer[position] != rune('C') {
																	goto l52
																}
																position++
															}
														l102:
															{
																position104, tokenIndex104 := position, tokenIndex
																if buffer[position] != rune('h') {
																	goto l105
																}
																position++
																goto l104
															l105:
																position, tokenIndex = position104, tokenIndex104
																if buffer[position] != rune('H') {
																	goto l52
																}
																position++
															}
														l104:
															{
																position106, tokenIndex106 := position, tokenIndex
																if buffer[position] != rune('a') {
																	goto l107
																}
																position++
																goto l106
															l107:
																position, tokenIndex = position106, tokenIndex106
																if buffer[position] != rune('A') {
																	goto l52
																}
																position++
															}
														l106:
															{
																position108, tokenIndex108 := position, tokenIndex
																if buffer[position] != rune('r') {
																	goto l109
																}
																position++
																goto l108
															l109:
																position, tokenIndex = position108, tokenIndex108
																if buffer[position] != rune('R') {
																	goto l52
																}
																position++
															}
														l108:
															if buffer[position] != rune('2') {
																goto l52
															}
															position++
															{
																position110, tokenIndex110 := position, tokenIndex
																if !_rules[ruleLetterOrDigit]() {
																	goto l110
																}
																goto l52
															l110:
																position, tokenIndex = position110, tokenIndex110
															}
															if !_rules[ruleSpacing]() {
																goto l52
															}
															add(ruleVARCHAR2, position95)
														}
													}
												l60:
													add(ruleTypeSpecifier, position59)
												}
												add(ruleVariableDeclaration, position58)
											}
											if !_rules[ruleSEMI]() {
												goto l52
											}
											add(ruleDeclarationItem, position57)
										}
									l55:
										{
											position56, tokenIndex56 := position, tokenIndex
											{
												position111 := position
												{
													position112 := position
													if !_rules[ruleIdentifier]() {
														goto l56
													}
													{
														position113 := position
														{
															position114, tokenIndex114 := position, tokenIndex
															{
																position116 := position
																{
																	position117, tokenIndex117 := position, tokenIndex
																	if buffer[position] != rune('i') {
																		goto l118
																	}
																	position++
																	goto l117
																l118:
																	position, tokenIndex = position117, tokenIndex117
																	if buffer[position] != rune('I') {
																		goto l115
																	}
																	position++
																}
															l117:
																{
																	position119, tokenIndex119 := position, tokenIndex
																	if buffer[position] != rune('n') {
																		goto l120
																	}
																	position++
																	goto l119
																l120:
																	position, tokenIndex = position119, tokenIndex119
																	if buffer[position] != rune('N') {
																		goto l115
																	}
																	position++
																}
															l119:
																{
																	position121, tokenIndex121 := position, tokenIndex
																	if buffer[position] != rune('t') {
																		goto l122
																	}
																	position++
																	goto l121
																l122:
																	position, tokenIndex = position121, tokenIndex121
																	if buffer[position] != rune('T') {
																		goto l115
																	}
																	position++
																}
															l121:
																{
																	position123, tokenIndex123 := position, tokenIndex
																	if buffer[position] != rune('e') {
																		goto l124
																	}
																	position++
																	goto l123
																l124:
																	position, tokenIndex = position123, tokenIndex123
																	if buffer[position] != rune('E') {
																		goto l115
																	}
																	position++
																}
															l123:
																{
																	position125, tokenIndex125 := position, tokenIndex
																	if buffer[position] != rune('g') {
																		goto l126
																	}
																	position++
																	goto l125
																l126:
																	position, tokenIndex = position125, tokenIndex125
																	if buffer[position] != rune('G') {
																		goto l115
																	}
																	position++
																}
															l125:
																{
																	position127, tokenIndex127 := position, tokenIndex
																	if buffer[position] != rune('e') {
																		goto l128
																	}
																	position++
																	goto l127
																l128:
																	position, tokenIndex = position127, tokenIndex127
																	if buffer[position] != rune('E') {
																		goto l115
																	}
																	position++
																}
															l127:
																{
																	position129, tokenIndex129 := position, tokenIndex
																	if buffer[position] != rune('r') {
																		goto l130
																	}
																	position++
																	goto l129
																l130:
																	position, tokenIndex = position129, tokenIndex129
																	if buffer[position] != rune('R') {
																		goto l115
																	}
																	position++
																}
															l129:
																{
																	position131, tokenIndex131 := position, tokenIndex
																	if !_rules[ruleLetterOrDigit]() {
																		goto l131
																	}
																	goto l115
																l131:
																	position, tokenIndex = position131, tokenIndex131
																}
																if !_rules[ruleSpacing]() {
																	goto l115
																}
																add(ruleINTEGER, position116)
															}
															goto l114
														l115:
															position, tokenIndex = position114, tokenIndex114
															{
																position133 := position
																{
																	position134, tokenIndex134 := position, tokenIndex
																	if buffer[position] != rune('v') {
																		goto l135
																	}
																	position++
																	goto l134
																l135:
																	position, tokenIndex = position134, tokenIndex134
																	if buffer[position] != rune('V') {
																		goto l132
																	}
																	position++
																}
															l134:
																{
																	position136, tokenIndex136 := position, tokenIndex
																	if buffer[position] != rune('a') {
																		goto l137
																	}
																	position++
																	goto l136
																l137:
																	position, tokenIndex = position136, tokenIndex136
																	if buffer[position] != rune('A') {
																		goto l132
																	}
																	position++
																}
															l136:
																{
																	position138, tokenIndex138 := position, tokenIndex
																	if buffer[position] != rune('r') {
																		goto l139
																	}
																	position++
																	goto l138
																l139:
																	position, tokenIndex = position138, tokenIndex138
																	if buffer[position] != rune('R') {
																		goto l132
																	}
																	position++
																}
															l138:
																{
																	position140, tokenIndex140 := position, tokenIndex
																	if buffer[position] != rune('c') {
																		goto l141
																	}
																	position++
																	goto l140
																l141:
																	position, tokenIndex = position140, tokenIndex140
																	if buffer[position] != rune('C') {
																		goto l132
																	}
																	position++
																}
															l140:
																{
																	position142, tokenIndex142 := position, tokenIndex
																	if buffer[position] != rune('h') {
																		goto l143
																	}
																	position++
																	goto l142
																l143:
																	position, tokenIndex = position142, tokenIndex142
																	if buffer[position] != rune('H') {
																		goto l132
																	}
																	position++
																}
															l142:
																{
																	position144, tokenIndex144 := position, tokenIndex
																	if buffer[position] != rune('a') {
																		goto l145
																	}
																	position++
																	goto l144
																l145:
																	position, tokenIndex = position144, tokenIndex144
																	if buffer[position] != rune('A') {
																		goto l132
																	}
																	position++
																}
															l144:
																{
																	position146, tokenIndex146 := position, tokenIndex
																	if buffer[position] != rune('r') {
																		goto l147
																	}
																	position++
																	goto l146
																l147:
																	position, tokenIndex = position146, tokenIndex146
																	if buffer[position] != rune('R') {
																		goto l132
																	}
																	position++
																}
															l146:
																{
																	position148, tokenIndex148 := position, tokenIndex
																	if !_rules[ruleLetterOrDigit]() {
																		goto l148
																	}
																	goto l132
																l148:
																	position, tokenIndex = position148, tokenIndex148
																}
																if !_rules[ruleSpacing]() {
																	goto l132
																}
																add(ruleVARCHAR, position133)
															}
															goto l114
														l132:
															position, tokenIndex = position114, tokenIndex114
															{
																position149 := position
																{
																	position150, tokenIndex150 := position, tokenIndex
																	if buffer[position] != rune('v') {
																		goto l151
																	}
																	position++
																	goto l150
																l151:
																	position, tokenIndex = position150, tokenIndex150
																	if buffer[position] != rune('V') {
																		goto l56
																	}
																	position++
																}
															l150:
																{
																	position152, tokenIndex152 := position, tokenIndex
																	if buffer[position] != rune('a') {
																		goto l153
																	}
																	position++
																	goto l152
																l153:
																	position, tokenIndex = position152, tokenIndex152
																	if buffer[position] != rune('A') {
																		goto l56
																	}
																	position++
																}
															l152:
																{
																	position154, tokenIndex154 := position, tokenIndex
																	if buffer[position] != rune('r') {
																		goto l155
																	}
																	position++
																	goto l154
																l155:
																	position, tokenIndex = position154, tokenIndex154
																	if buffer[position] != rune('R') {
																		goto l56
																	}
																	position++
																}
															l154:
																{
																	position156, tokenIndex156 := position, tokenIndex
																	if buffer[position] != rune('c') {
																		goto l157
																	}
																	position++
																	goto l156
																l157:
																	position, tokenIndex = position156, tokenIndex156
																	if buffer[position] != rune('C') {
																		goto l56
																	}
																	position++
																}
															l156:
																{
																	position158, tokenIndex158 := position, tokenIndex
																	if buffer[position] != rune('h') {
																		goto l159
																	}
																	position++
																	goto l158
																l159:
																	position, tokenIndex = position158, tokenIndex158
																	if buffer[position] != rune('H') {
																		goto l56
																	}
																	position++
																}
															l158:
																{
																	position160, tokenIndex160 := position, tokenIndex
																	if buffer[position] != rune('a') {
																		goto l161
																	}
																	position++
																	goto l160
																l161:
																	position, tokenIndex = position160, tokenIndex160
																	if buffer[position] != rune('A') {
																		goto l56
																	}
																	position++
																}
															l160:
																{
																	position162, tokenIndex162 := position, tokenIndex
																	if buffer[position] != rune('r') {
																		goto l163
																	}
																	position++
																	goto l162
																l163:
																	position, tokenIndex = position162, tokenIndex162
																	if buffer[position] != rune('R') {
																		goto l56
																	}
																	position++
																}
															l162:
																if buffer[position] != rune('2') {
																	goto l56
																}
																position++
																{
																	position164, tokenIndex164 := position, tokenIndex
																	if !_rules[ruleLetterOrDigit]() {
																		goto l164
																	}
																	goto l56
																l164:
																	position, tokenIndex = position164, tokenIndex164
																}
																if !_rules[ruleSpacing]() {
																	goto l56
																}
																add(ruleVARCHAR2, position149)
															}
														}
													l114:
														add(ruleTypeSpecifier, position113)
													}
													add(ruleVariableDeclaration, position112)
												}
												if !_rules[ruleSEMI]() {
													goto l56
												}
												add(ruleDeclarationItem, position111)
											}
											goto l55
										l56:
											position, tokenIndex = position56, tokenIndex56
										}
										add(ruleProcedureDeclarationBlock, position54)
									}
									goto l53
								l52:
									position, tokenIndex = position52, tokenIndex52
								}
							l53:
								{
									position165 := position
									{
										position166 := position
										{
											position167, tokenIndex167 := position, tokenIndex
											if buffer[position] != rune('b') {
												goto l168
											}
											position++
											goto l167
										l168:
											position, tokenIndex = position167, tokenIndex167
											if buffer[position] != rune('B') {
												goto l3
											}
											position++
										}
									l167:
										{
											position169, tokenIndex169 := position, tokenIndex
											if buffer[position] != rune('e') {
												goto l170
											}
											position++
											goto l169
										l170:
											position, tokenIndex = position169, tokenIndex169
											if buffer[position] != rune('E') {
												goto l3
											}
											position++
										}
									l169:
										{
											position171, tokenIndex171 := position, tokenIndex
											if buffer[position] != rune('g') {
												goto l172
											}
											position++
											goto l171
										l172:
											position, tokenIndex = position171, tokenIndex171
											if buffer[position] != rune('G') {
												goto l3
											}
											position++
										}
									l171:
										{
											position173, tokenIndex173 := position, tokenIndex
											if buffer[position] != rune('i') {
												goto l174
											}
											position++
											goto l173
										l174:
											position, tokenIndex = position173, tokenIndex173
											if buffer[position] != rune('I') {
												goto l3
											}
											position++
										}
									l173:
										{
											position175, tokenIndex175 := position, tokenIndex
											if buffer[position] != rune('n') {
												goto l176
											}
											position++
											goto l175
										l176:
											position, tokenIndex = position175, tokenIndex175
											if buffer[position] != rune('N') {
												goto l3
											}
											position++
										}
									l175:
										{
											position177, tokenIndex177 := position, tokenIndex
											if !_rules[ruleLetterOrDigit]() {
												goto l177
											}
											goto l3
										l177:
											position, tokenIndex = position177, tokenIndex177
										}
										if !_rules[ruleSpacing]() {
											goto l3
										}
										add(ruleBEGIN, position166)
									}
									if !_rules[ruleEND]() {
										goto l3
									}
									add(ruleProcedureBody, position165)
								}
								if !_rules[ruleSEMI]() {
									goto l3
								}
								add(ruleCreateProcedureDeclaration, position27)
							}
						}
					l5:
						add(ruleStatement, position4)
					}
					goto l2
				l3:
					position, tokenIndex = position3, tokenIndex3
				}
				{
					position178 := position
					{
						position179, tokenIndex179 := position, tokenIndex
						if !matchDot() {
							goto l179
						}
						goto l0
					l179:
						position, tokenIndex = position179, tokenIndex179
					}
					add(ruleEOT, position178)
				}
				add(ruleUnit, position1)
			}
			memoize(0, position0, tokenIndex0, true)
			return true
		l0:
			memoize(0, position0, tokenIndex0, false)
			position, tokenIndex = position0, tokenIndex0
			return false
		},
		/* 1 Statement <- <(CreatePackageDeclaration / CreateProcedureDeclaration)> */
		nil,
		/* 2 CreatePackageDeclaration <- <(CREATE (OR REPLACE)? PACKAGE PackageName IS END SEMI)> */
		nil,
		/* 3 PackageName <- <Identifier> */
		nil,
		/* 4 CreateProcedureDeclaration <- <(CREATE (OR REPLACE)? ProcedureHeader IS ProcedureDeclarationBlock? ProcedureBody SEMI)> */
		nil,
		/* 5 ProcedureHeader <- <(PROCEDURE ProcedureName)> */
		nil,
		/* 6 ProcedureDeclarationBlock <- <DeclarationItem+> */
		nil,
		/* 7 DeclarationItem <- <(VariableDeclaration SEMI)> */
		nil,
		/* 8 VariableDeclaration <- <(Identifier TypeSpecifier)> */
		nil,
		/* 9 ProcedureBody <- <(BEGIN END)> */
		nil,
		/* 10 ProcedureName <- <Identifier> */
		nil,
		/* 11 TypeSpecifier <- <(INTEGER / VARCHAR / VARCHAR2)> */
		nil,
		/* 12 Identifier <- <(!Keyword Letter LetterOrDigit* Spacing)> */
		func() bool {
			if memoized, ok := memoization[memoKey{12, position}]; ok {
				return memoizedResult(memoized)
			}
			position191, tokenIndex191 := position, tokenIndex
			{
				position192 := position
				{
					position193, tokenIndex193 := position, tokenIndex
					{
						position194 := position
						{
							position195, tokenIndex195 := position, tokenIndex
							{
								position197, tokenIndex197 := position, tokenIndex
								if buffer[position] != rune('p') {
									goto l198
								}
								position++
								goto l197
							l198:
								position, tokenIndex = position197, tokenIndex197
								if buffer[position] != rune('P') {
									goto l196
								}
								position++
							}
						l197:
							{
								position199, tokenIndex199 := position, tokenIndex
								if buffer[position] != rune('a') {
									goto l200
								}
								position++
								goto l199
							l200:
								position, tokenIndex = position199, tokenIndex199
								if buffer[position] != rune('A') {
									goto l196
								}
								position++
							}
						l199:
							{
								position201, tokenIndex201 := position, tokenIndex
								if buffer[position] != rune('c') {
									goto l202
								}
								position++
								goto l201
							l202:
								position, tokenIndex = position201, tokenIndex201
								if buffer[position] != rune('C') {
									goto l196
								}
								position++
							}
						l201:
							{
								position203, tokenIndex203 := position, tokenIndex
								if buffer[position] != rune('k') {
									goto l204
								}
								position++
								goto l203
							l204:
								position, tokenIndex = position203, tokenIndex203
								if buffer[position] != rune('K') {
									goto l196
								}
								position++
							}
						l203:
							{
								position205, tokenIndex205 := position, tokenIndex
								if buffer[position] != rune('a') {
									goto l206
								}
								position++
								goto l205
							l206:
								position, tokenIndex = position205, tokenIndex205
								if buffer[position] != rune('A') {
									goto l196
								}
								position++
							}
						l205:
							{
								position207, tokenIndex207 := position, tokenIndex
								if buffer[position] != rune('g') {
									goto l208
								}
								position++
								goto l207
							l208:
								position, tokenIndex = position207, tokenIndex207
								if buffer[position] != rune('G') {
									goto l196
								}
								position++
							}
						l207:
							{
								position209, tokenIndex209 := position, tokenIndex
								if buffer[position] != rune('e') {
									goto l210
								}
								position++
								goto l209
							l210:
								position, tokenIndex = position209, tokenIndex209
								if buffer[position] != rune('E') {
									goto l196
								}
								position++
							}
						l209:
							goto l195
						l196:
							position, tokenIndex = position195, tokenIndex195
							{
								position212, tokenIndex212 := position, tokenIndex
								if buffer[position] != rune('i') {
									goto l213
								}
								position++
								goto l212
							l213:
								position, tokenIndex = position212, tokenIndex212
								if buffer[position] != rune('I') {
									goto l211
								}
								position++
							}
						l212:
							{
								position214, tokenIndex214 := position, tokenIndex
								if buffer[position] != rune('s') {
									goto l215
								}
								position++
								goto l214
							l215:
								position, tokenIndex = position214, tokenIndex214
								if buffer[position] != rune('S') {
									goto l211
								}
								position++
							}
						l214:
							goto l195
						l211:
							position, tokenIndex = position195, tokenIndex195
							{
								position217, tokenIndex217 := position, tokenIndex
								if buffer[position] != rune('v') {
									goto l218
								}
								position++
								goto l217
							l218:
								position, tokenIndex = position217, tokenIndex217
								if buffer[position] != rune('V') {
									goto l216
								}
								position++
							}
						l217:
							{
								position219, tokenIndex219 := position, tokenIndex
								if buffer[position] != rune('a') {
									goto l220
								}
								position++
								goto l219
							l220:
								position, tokenIndex = position219, tokenIndex219
								if buffer[position] != rune('A') {
									goto l216
								}
								position++
							}
						l219:
							{
								position221, tokenIndex221 := position, tokenIndex
								if buffer[position] != rune('r') {
									goto l222
								}
								position++
								goto l221
							l222:
								position, tokenIndex = position221, tokenIndex221
								if buffer[position] != rune('R') {
									goto l216
								}
								position++
							}
						l221:
							{
								position223, tokenIndex223 := position, tokenIndex
								if buffer[position] != rune('c') {
									goto l224
								}
								position++
								goto l223
							l224:
								position, tokenIndex = position223, tokenIndex223
								if buffer[position] != rune('C') {
									goto l216
								}
								position++
							}
						l223:
							{
								position225, tokenIndex225 := position, tokenIndex
								if buffer[position] != rune('h') {
									goto l226
								}
								position++
								goto l225
							l226:
								position, tokenIndex = position225, tokenIndex225
								if buffer[position] != rune('H') {
									goto l216
								}
								position++
							}
						l225:
							{
								position227, tokenIndex227 := position, tokenIndex
								if buffer[position] != rune('a') {
									goto l228
								}
								position++
								goto l227
							l228:
								position, tokenIndex = position227, tokenIndex227
								if buffer[position] != rune('A') {
									goto l216
								}
								position++
							}
						l227:
							{
								position229, tokenIndex229 := position, tokenIndex
								if buffer[position] != rune('r') {
									goto l230
								}
								position++
								goto l229
							l230:
								position, tokenIndex = position229, tokenIndex229
								if buffer[position] != rune('R') {
									goto l216
								}
								position++
							}
						l229:
							goto l195
						l216:
							position, tokenIndex = position195, tokenIndex195
							{
								switch buffer[position] {
								case 'V', 'v':
									{
										position232, tokenIndex232 := position, tokenIndex
										if buffer[position] != rune('v') {
											goto l233
										}
										position++
										goto l232
									l233:
										position, tokenIndex = position232, tokenIndex232
										if buffer[position] != rune('V') {
											goto l193
										}
										position++
									}
								l232:
									{
										position234, tokenIndex234 := position, tokenIndex
										if buffer[position] != rune('a') {
											goto l235
										}
										position++
										goto l234
									l235:
										position, tokenIndex = position234, tokenIndex234
										if buffer[position] != rune('A') {
											goto l193
										}
										position++
									}
								l234:
									{
										position236, tokenIndex236 := position, tokenIndex
										if buffer[position] != rune('r') {
											goto l237
										}
										position++
										goto l236
									l237:
										position, tokenIndex = position236, tokenIndex236
										if buffer[position] != rune('R') {
											goto l193
										}
										position++
									}
								l236:
									{
										position238, tokenIndex238 := position, tokenIndex
										if buffer[position] != rune('c') {
											goto l239
										}
										position++
										goto l238
									l239:
										position, tokenIndex = position238, tokenIndex238
										if buffer[position] != rune('C') {
											goto l193
										}
										position++
									}
								l238:
									{
										position240, tokenIndex240 := position, tokenIndex
										if buffer[position] != rune('h') {
											goto l241
										}
										position++
										goto l240
									l241:
										position, tokenIndex = position240, tokenIndex240
										if buffer[position] != rune('H') {
											goto l193
										}
										position++
									}
								l240:
									{
										position242, tokenIndex242 := position, tokenIndex
										if buffer[position] != rune('a') {
											goto l243
										}
										position++
										goto l242
									l243:
										position, tokenIndex = position242, tokenIndex242
										if buffer[position] != rune('A') {
											goto l193
										}
										position++
									}
								l242:
									{
										position244, tokenIndex244 := position, tokenIndex
										if buffer[position] != rune('r') {
											goto l245
										}
										position++
										goto l244
									l245:
										position, tokenIndex = position244, tokenIndex244
										if buffer[position] != rune('R') {
											goto l193
										}
										position++
									}
								l244:
									if buffer[position] != rune('2') {
										goto l193
									}
									position++
								case 'I', 'i':
									{
										position246, tokenIndex246 := position, tokenIndex
										if buffer[position] != rune('i') {
											goto l247
										}
										position++
										goto l246
									l247:
										position, tokenIndex = position246, tokenIndex246
										if buffer[position] != rune('I') {
											goto l193
										}
										position++
									}
								l246:
									{
										position248, tokenIndex248 := position, tokenIndex
										if buffer[position] != rune('n') {
											goto l249
										}
										position++
										goto l248
									l249:
										position, tokenIndex = position248, tokenIndex248
										if buffer[position] != rune('N') {
											goto l193
										}
										position++
									}
								l248:
									{
										position250, tokenIndex250 := position, tokenIndex
										if buffer[position] != rune('t') {
											goto l251
										}
										position++
										goto l250
									l251:
										position, tokenIndex = position250, tokenIndex250
										if buffer[position] != rune('T') {
											goto l193
										}
										position++
									}
								l250:
									{
										position252, tokenIndex252 := position, tokenIndex
										if buffer[position] != rune('e') {
											goto l253
										}
										position++
										goto l252
									l253:
										position, tokenIndex = position252, tokenIndex252
										if buffer[position] != rune('E') {
											goto l193
										}
										position++
									}
								l252:
									{
										position254, tokenIndex254 := position, tokenIndex
										if buffer[position] != rune('g') {
											goto l255
										}
										position++
										goto l254
									l255:
										position, tokenIndex = position254, tokenIndex254
										if buffer[position] != rune('G') {
											goto l193
										}
										position++
									}
								l254:
									{
										position256, tokenIndex256 := position, tokenIndex
										if buffer[position] != rune('e') {
											goto l257
										}
										position++
										goto l256
									l257:
										position, tokenIndex = position256, tokenIndex256
										if buffer[position] != rune('E') {
											goto l193
										}
										position++
									}
								l256:
									{
										position258, tokenIndex258 := position, tokenIndex
										if buffer[position] != rune('r') {
											goto l259
										}
										position++
										goto l258
									l259:
										position, tokenIndex = position258, tokenIndex258
										if buffer[position] != rune('R') {
											goto l193
										}
										position++
									}
								l258:
									break
								case 'P', 'p':
									{
										position260, tokenIndex260 := position, tokenIndex
										if buffer[position] != rune('p') {
											goto l261
										}
										position++
										goto l260
									l261:
										position, tokenIndex = position260, tokenIndex260
										if buffer[position] != rune('P') {
											goto l193
										}
										position++
									}
								l260:
									{
										position262, tokenIndex262 := position, tokenIndex
										if buffer[position] != rune('r') {
											goto l263
										}
										position++
										goto l262
									l263:
										position, tokenIndex = position262, tokenIndex262
										if buffer[position] != rune('R') {
											goto l193
										}
										position++
									}
								l262:
									{
										position264, tokenIndex264 := position, tokenIndex
										if buffer[position] != rune('o') {
											goto l265
										}
										position++
										goto l264
									l265:
										position, tokenIndex = position264, tokenIndex264
										if buffer[position] != rune('O') {
											goto l193
										}
										position++
									}
								l264:
									{
										position266, tokenIndex266 := position, tokenIndex
										if buffer[position] != rune('c') {
											goto l267
										}
										position++
										goto l266
									l267:
										position, tokenIndex = position266, tokenIndex266
										if buffer[position] != rune('C') {
											goto l193
										}
										position++
									}
								l266:
									{
										position268, tokenIndex268 := position, tokenIndex
										if buffer[position] != rune('e') {
											goto l269
										}
										position++
										goto l268
									l269:
										position, tokenIndex = position268, tokenIndex268
										if buffer[position] != rune('E') {
											goto l193
										}
										position++
									}
								l268:
									{
										position270, tokenIndex270 := position, tokenIndex
										if buffer[position] != rune('d') {
											goto l271
										}
										position++
										goto l270
									l271:
										position, tokenIndex = position270, tokenIndex270
										if buffer[position] != rune('D') {
											goto l193
										}
										position++
									}
								l270:
									{
										position272, tokenIndex272 := position, tokenIndex
										if buffer[position] != rune('u') {
											goto l273
										}
										position++
										goto l272
									l273:
										position, tokenIndex = position272, tokenIndex272
										if buffer[position] != rune('U') {
											goto l193
										}
										position++
									}
								l272:
									{
										position274, tokenIndex274 := position, tokenIndex
										if buffer[position] != rune('r') {
											goto l275
										}
										position++
										goto l274
									l275:
										position, tokenIndex = position274, tokenIndex274
										if buffer[position] != rune('R') {
											goto l193
										}
										position++
									}
								l274:
									{
										position276, tokenIndex276 := position, tokenIndex
										if buffer[position] != rune('e') {
											goto l277
										}
										position++
										goto l276
									l277:
										position, tokenIndex = position276, tokenIndex276
										if buffer[position] != rune('E') {
											goto l193
										}
										position++
									}
								l276:
									break
								case 'E', 'e':
									{
										position278, tokenIndex278 := position, tokenIndex
										if buffer[position] != rune('e') {
											goto l279
										}
										position++
										goto l278
									l279:
										position, tokenIndex = position278, tokenIndex278
										if buffer[position] != rune('E') {
											goto l193
										}
										position++
									}
								l278:
									{
										position280, tokenIndex280 := position, tokenIndex
										if buffer[position] != rune('n') {
											goto l281
										}
										position++
										goto l280
									l281:
										position, tokenIndex = position280, tokenIndex280
										if buffer[position] != rune('N') {
											goto l193
										}
										position++
									}
								l280:
									{
										position282, tokenIndex282 := position, tokenIndex
										if buffer[position] != rune('d') {
											goto l283
										}
										position++
										goto l282
									l283:
										position, tokenIndex = position282, tokenIndex282
										if buffer[position] != rune('D') {
											goto l193
										}
										position++
									}
								l282:
									break
								case 'B', 'b':
									{
										position284, tokenIndex284 := position, tokenIndex
										if buffer[position] != rune('b') {
											goto l285
										}
										position++
										goto l284
									l285:
										position, tokenIndex = position284, tokenIndex284
										if buffer[position] != rune('B') {
											goto l193
										}
										position++
									}
								l284:
									{
										position286, tokenIndex286 := position, tokenIndex
										if buffer[position] != rune('e') {
											goto l287
										}
										position++
										goto l286
									l287:
										position, tokenIndex = position286, tokenIndex286
										if buffer[position] != rune('E') {
											goto l193
										}
										position++
									}
								l286:
									{
										position288, tokenIndex288 := position, tokenIndex
										if buffer[position] != rune('g') {
											goto l289
										}
										position++
										goto l288
									l289:
										position, tokenIndex = position288, tokenIndex288
										if buffer[position] != rune('G') {
											goto l193
										}
										position++
									}
								l288:
									{
										position290, tokenIndex290 := position, tokenIndex
										if buffer[position] != rune('i') {
											goto l291
										}
										position++
										goto l290
									l291:
										position, tokenIndex = position290, tokenIndex290
										if buffer[position] != rune('I') {
											goto l193
										}
										position++
									}
								l290:
									{
										position292, tokenIndex292 := position, tokenIndex
										if buffer[position] != rune('n') {
											goto l293
										}
										position++
										goto l292
									l293:
										position, tokenIndex = position292, tokenIndex292
										if buffer[position] != rune('N') {
											goto l193
										}
										position++
									}
								l292:
									break
								case 'R', 'r':
									{
										position294, tokenIndex294 := position, tokenIndex
										if buffer[position] != rune('r') {
											goto l295
										}
										position++
										goto l294
									l295:
										position, tokenIndex = position294, tokenIndex294
										if buffer[position] != rune('R') {
											goto l193
										}
										position++
									}
								l294:
									{
										position296, tokenIndex296 := position, tokenIndex
										if buffer[position] != rune('e') {
											goto l297
										}
										position++
										goto l296
									l297:
										position, tokenIndex = position296, tokenIndex296
										if buffer[position] != rune('E') {
											goto l193
										}
										position++
									}
								l296:
									{
										position298, tokenIndex298 := position, tokenIndex
										if buffer[position] != rune('p') {
											goto l299
										}
										position++
										goto l298
									l299:
										position, tokenIndex = position298, tokenIndex298
										if buffer[position] != rune('P') {
											goto l193
										}
										position++
									}
								l298:
									{
										position300, tokenIndex300 := position, tokenIndex
										if buffer[position] != rune('l') {
											goto l301
										}
										position++
										goto l300
									l301:
										position, tokenIndex = position300, tokenIndex300
										if buffer[position] != rune('L') {
											goto l193
										}
										position++
									}
								l300:
									{
										position302, tokenIndex302 := position, tokenIndex
										if buffer[position] != rune('a') {
											goto l303
										}
										position++
										goto l302
									l303:
										position, tokenIndex = position302, tokenIndex302
										if buffer[position] != rune('A') {
											goto l193
										}
										position++
									}
								l302:
									{
										position304, tokenIndex304 := position, tokenIndex
										if buffer[position] != rune('c') {
											goto l305
										}
										position++
										goto l304
									l305:
										position, tokenIndex = position304, tokenIndex304
										if buffer[position] != rune('C') {
											goto l193
										}
										position++
									}
								l304:
									{
										position306, tokenIndex306 := position, tokenIndex
										if buffer[position] != rune('e') {
											goto l307
										}
										position++
										goto l306
									l307:
										position, tokenIndex = position306, tokenIndex306
										if buffer[position] != rune('E') {
											goto l193
										}
										position++
									}
								l306:
									break
								case 'O', 'o':
									{
										position308, tokenIndex308 := position, tokenIndex
										if buffer[position] != rune('o') {
											goto l309
										}
										position++
										goto l308
									l309:
										position, tokenIndex = position308, tokenIndex308
										if buffer[position] != rune('O') {
											goto l193
										}
										position++
									}
								l308:
									{
										position310, tokenIndex310 := position, tokenIndex
										if buffer[position] != rune('r') {
											goto l311
										}
										position++
										goto l310
									l311:
										position, tokenIndex = position310, tokenIndex310
										if buffer[position] != rune('R') {
											goto l193
										}
										position++
									}
								l310:
									break
								default:
									{
										position312, tokenIndex312 := position, tokenIndex
										if buffer[position] != rune('c') {
											goto l313
										}
										position++
										goto l312
									l313:
										position, tokenIndex = position312, tokenIndex312
										if buffer[position] != rune('C') {
											goto l193
										}
										position++
									}
								l312:
									{
										position314, tokenIndex314 := position, tokenIndex
										if buffer[position] != rune('r') {
											goto l315
										}
										position++
										goto l314
									l315:
										position, tokenIndex = position314, tokenIndex314
										if buffer[position] != rune('R') {
											goto l193
										}
										position++
									}
								l314:
									{
										position316, tokenIndex316 := position, tokenIndex
										if buffer[position] != rune('e') {
											goto l317
										}
										position++
										goto l316
									l317:
										position, tokenIndex = position316, tokenIndex316
										if buffer[position] != rune('E') {
											goto l193
										}
										position++
									}
								l316:
									{
										position318, tokenIndex318 := position, tokenIndex
										if buffer[position] != rune('a') {
											goto l319
										}
										position++
										goto l318
									l319:
										position, tokenIndex = position318, tokenIndex318
										if buffer[position] != rune('A') {
											goto l193
										}
										position++
									}
								l318:
									{
										position320, tokenIndex320 := position, tokenIndex
										if buffer[position] != rune('t') {
											goto l321
										}
										position++
										goto l320
									l321:
										position, tokenIndex = position320, tokenIndex320
										if buffer[position] != rune('T') {
											goto l193
										}
										position++
									}
								l320:
									{
										position322, tokenIndex322 := position, tokenIndex
										if buffer[position] != rune('e') {
											goto l323
										}
										position++
										goto l322
									l323:
										position, tokenIndex = position322, tokenIndex322
										if buffer[position] != rune('E') {
											goto l193
										}
										position++
									}
								l322:
									break
								}
							}

						}
					l195:
						{
							position324, tokenIndex324 := position, tokenIndex
							if !_rules[ruleLetterOrDigit]() {
								goto l324
							}
							goto l193
						l324:
							position, tokenIndex = position324, tokenIndex324
						}
						add(ruleKeyword, position194)
					}
					goto l191
				l193:
					position, tokenIndex = position193, tokenIndex193
				}
				{
					position325 := position
					{
						switch buffer[position] {
						case '$', '_':
							{
								position327, tokenIndex327 := position, tokenIndex
								if buffer[position] != rune('_') {
									goto l328
								}
								position++
								goto l327
							l328:
								position, tokenIndex = position327, tokenIndex327
								if buffer[position] != rune('$') {
									goto l191
								}
								position++
							}
						l327:
							break
						case 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z':
							if c := buffer[position]; c < rune('A') || c > rune('Z') {
								goto l191
							}
							position++
						default:
							if c := buffer[position]; c < rune('a') || c > rune('z') {
								goto l191
							}
							position++
						}
					}

					add(ruleLetter, position325)
				}
			l329:
				{
					position330, tokenIndex330 := position, tokenIndex
					if !_rules[ruleLetterOrDigit]() {
						goto l330
					}
					goto l329
				l330:
					position, tokenIndex = position330, tokenIndex330
				}
				if !_rules[ruleSpacing]() {
					goto l191
				}
				add(ruleIdentifier, position192)
			}
			memoize(12, position191, tokenIndex191, true)
			return true
		l191:
			memoize(12, position191, tokenIndex191, false)
			position, tokenIndex = position191, tokenIndex191
			return false
		},
		/* 13 Letter <- <((&('$' | '_') ('_' / '$')) | (&('A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z') [A-Z]) | (&('a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v' | 'w' | 'x' | 'y' | 'z') [a-z]))> */
		nil,
		/* 14 Spacing <- <((&('\n') '\n') | (&('\r') '\r') | (&('\t') '\t') | (&(' ') ' '))+*> */
		func() bool {
			if memoized, ok := memoization[memoKey{14, position}]; ok {
				return memoizedResult(memoized)
			}
			position332, tokenIndex332 := position, tokenIndex
			{
				position333 := position
			l334:
				{
					position335, tokenIndex335 := position, tokenIndex
					{
						switch buffer[position] {
						case '\n':
							if buffer[position] != rune('\n') {
								goto l335
							}
							position++
						case '\r':
							if buffer[position] != rune('\r') {
								goto l335
							}
							position++
						case '\t':
							if buffer[position] != rune('\t') {
								goto l335
							}
							position++
						default:
							if buffer[position] != rune(' ') {
								goto l335
							}
							position++
						}
					}

				l336:
					{
						position337, tokenIndex337 := position, tokenIndex
						{
							switch buffer[position] {
							case '\n':
								if buffer[position] != rune('\n') {
									goto l337
								}
								position++
							case '\r':
								if buffer[position] != rune('\r') {
									goto l337
								}
								position++
							case '\t':
								if buffer[position] != rune('\t') {
									goto l337
								}
								position++
							default:
								if buffer[position] != rune(' ') {
									goto l337
								}
								position++
							}
						}

						goto l336
					l337:
						position, tokenIndex = position337, tokenIndex337
					}
					goto l334
				l335:
					position, tokenIndex = position335, tokenIndex335
				}
				add(ruleSpacing, position333)
			}
			memoize(14, position332, tokenIndex332, true)
			return true
		},
		/* 15 LetterOrDigit <- <((&('$' | '_') ('_' / '$')) | (&('0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9') [0-9]) | (&('A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z') [A-Z]) | (&('a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v' | 'w' | 'x' | 'y' | 'z') [a-z]))> */
		func() bool {
			if memoized, ok := memoization[memoKey{15, position}]; ok {
				return memoizedResult(memoized)
			}
			position340, tokenIndex340 := position, tokenIndex
			{
				position341 := position
				{
					switch buffer[position] {
					case '$', '_':
						{
							position343, tokenIndex343 := position, tokenIndex
							if buffer[position] != rune('_') {
								goto l344
							}
							position++
							goto l343
						l344:
							position, tokenIndex = position343, tokenIndex343
							if buffer[position] != rune('$') {
								goto l340
							}
							position++
						}
					l343:
						break
					case '0', '1', '2', '3', '4', '5', '6', '7', '8', '9':
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l340
						}
						position++
					case 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z':
						if c := buffer[position]; c < rune('A') || c > rune('Z') {
							goto l340
						}
						position++
					default:
						if c := buffer[position]; c < rune('a') || c > rune('z') {
							goto l340
						}
						position++
					}
				}

				add(ruleLetterOrDigit, position341)
			}
			memoize(15, position340, tokenIndex340, true)
			return true
		l340:
			memoize(15, position340, tokenIndex340, false)
			position, tokenIndex = position340, tokenIndex340
			return false
		},
		/* 16 Keyword <- <(((('p' / 'P') ('a' / 'A') ('c' / 'C') ('k' / 'K') ('a' / 'A') ('g' / 'G') ('e' / 'E')) / (('i' / 'I') ('s' / 'S')) / (('v' / 'V') ('a' / 'A') ('r' / 'R') ('c' / 'C') ('h' / 'H') ('a' / 'A') ('r' / 'R')) / ((&('V' | 'v') (('v' / 'V') ('a' / 'A') ('r' / 'R') ('c' / 'C') ('h' / 'H') ('a' / 'A') ('r' / 'R') '2')) | (&('I' | 'i') (('i' / 'I') ('n' / 'N') ('t' / 'T') ('e' / 'E') ('g' / 'G') ('e' / 'E') ('r' / 'R'))) | (&('P' | 'p') (('p' / 'P') ('r' / 'R') ('o' / 'O') ('c' / 'C') ('e' / 'E') ('d' / 'D') ('u' / 'U') ('r' / 'R') ('e' / 'E'))) | (&('E' | 'e') (('e' / 'E') ('n' / 'N') ('d' / 'D'))) | (&('B' | 'b') (('b' / 'B') ('e' / 'E') ('g' / 'G') ('i' / 'I') ('n' / 'N'))) | (&('R' | 'r') (('r' / 'R') ('e' / 'E') ('p' / 'P') ('l' / 'L') ('a' / 'A') ('c' / 'C') ('e' / 'E'))) | (&('O' | 'o') (('o' / 'O') ('r' / 'R'))) | (&('C' | 'c') (('c' / 'C') ('r' / 'R') ('e' / 'E') ('a' / 'A') ('t' / 'T') ('e' / 'E'))))) !LetterOrDigit)> */
		nil,
		/* 17 CREATE <- <(('c' / 'C') ('r' / 'R') ('e' / 'E') ('a' / 'A') ('t' / 'T') ('e' / 'E') !LetterOrDigit Spacing)> */
		func() bool {
			if memoized, ok := memoization[memoKey{17, position}]; ok {
				return memoizedResult(memoized)
			}
			position346, tokenIndex346 := position, tokenIndex
			{
				position347 := position
				{
					position348, tokenIndex348 := position, tokenIndex
					if buffer[position] != rune('c') {
						goto l349
					}
					position++
					goto l348
				l349:
					position, tokenIndex = position348, tokenIndex348
					if buffer[position] != rune('C') {
						goto l346
					}
					position++
				}
			l348:
				{
					position350, tokenIndex350 := position, tokenIndex
					if buffer[position] != rune('r') {
						goto l351
					}
					position++
					goto l350
				l351:
					position, tokenIndex = position350, tokenIndex350
					if buffer[position] != rune('R') {
						goto l346
					}
					position++
				}
			l350:
				{
					position352, tokenIndex352 := position, tokenIndex
					if buffer[position] != rune('e') {
						goto l353
					}
					position++
					goto l352
				l353:
					position, tokenIndex = position352, tokenIndex352
					if buffer[position] != rune('E') {
						goto l346
					}
					position++
				}
			l352:
				{
					position354, tokenIndex354 := position, tokenIndex
					if buffer[position] != rune('a') {
						goto l355
					}
					position++
					goto l354
				l355:
					position, tokenIndex = position354, tokenIndex354
					if buffer[position] != rune('A') {
						goto l346
					}
					position++
				}
			l354:
				{
					position356, tokenIndex356 := position, tokenIndex
					if buffer[position] != rune('t') {
						goto l357
					}
					position++
					goto l356
				l357:
					position, tokenIndex = position356, tokenIndex356
					if buffer[position] != rune('T') {
						goto l346
					}
					position++
				}
			l356:
				{
					position358, tokenIndex358 := position, tokenIndex
					if buffer[position] != rune('e') {
						goto l359
					}
					position++
					goto l358
				l359:
					position, tokenIndex = position358, tokenIndex358
					if buffer[position] != rune('E') {
						goto l346
					}
					position++
				}
			l358:
				{
					position360, tokenIndex360 := position, tokenIndex
					if !_rules[ruleLetterOrDigit]() {
						goto l360
					}
					goto l346
				l360:
					position, tokenIndex = position360, tokenIndex360
				}
				if !_rules[ruleSpacing]() {
					goto l346
				}
				add(ruleCREATE, position347)
			}
			memoize(17, position346, tokenIndex346, true)
			return true
		l346:
			memoize(17, position346, tokenIndex346, false)
			position, tokenIndex = position346, tokenIndex346
			return false
		},
		/* 18 OR <- <(('o' / 'O') ('r' / 'R') !LetterOrDigit Spacing)> */
		func() bool {
			if memoized, ok := memoization[memoKey{18, position}]; ok {
				return memoizedResult(memoized)
			}
			position361, tokenIndex361 := position, tokenIndex
			{
				position362 := position
				{
					position363, tokenIndex363 := position, tokenIndex
					if buffer[position] != rune('o') {
						goto l364
					}
					position++
					goto l363
				l364:
					position, tokenIndex = position363, tokenIndex363
					if buffer[position] != rune('O') {
						goto l361
					}
					position++
				}
			l363:
				{
					position365, tokenIndex365 := position, tokenIndex
					if buffer[position] != rune('r') {
						goto l366
					}
					position++
					goto l365
				l366:
					position, tokenIndex = position365, tokenIndex365
					if buffer[position] != rune('R') {
						goto l361
					}
					position++
				}
			l365:
				{
					position367, tokenIndex367 := position, tokenIndex
					if !_rules[ruleLetterOrDigit]() {
						goto l367
					}
					goto l361
				l367:
					position, tokenIndex = position367, tokenIndex367
				}
				if !_rules[ruleSpacing]() {
					goto l361
				}
				add(ruleOR, position362)
			}
			memoize(18, position361, tokenIndex361, true)
			return true
		l361:
			memoize(18, position361, tokenIndex361, false)
			position, tokenIndex = position361, tokenIndex361
			return false
		},
		/* 19 REPLACE <- <(('r' / 'R') ('e' / 'E') ('p' / 'P') ('l' / 'L') ('a' / 'A') ('c' / 'C') ('e' / 'E') !LetterOrDigit Spacing)> */
		func() bool {
			if memoized, ok := memoization[memoKey{19, position}]; ok {
				return memoizedResult(memoized)
			}
			position368, tokenIndex368 := position, tokenIndex
			{
				position369 := position
				{
					position370, tokenIndex370 := position, tokenIndex
					if buffer[position] != rune('r') {
						goto l371
					}
					position++
					goto l370
				l371:
					position, tokenIndex = position370, tokenIndex370
					if buffer[position] != rune('R') {
						goto l368
					}
					position++
				}
			l370:
				{
					position372, tokenIndex372 := position, tokenIndex
					if buffer[position] != rune('e') {
						goto l373
					}
					position++
					goto l372
				l373:
					position, tokenIndex = position372, tokenIndex372
					if buffer[position] != rune('E') {
						goto l368
					}
					position++
				}
			l372:
				{
					position374, tokenIndex374 := position, tokenIndex
					if buffer[position] != rune('p') {
						goto l375
					}
					position++
					goto l374
				l375:
					position, tokenIndex = position374, tokenIndex374
					if buffer[position] != rune('P') {
						goto l368
					}
					position++
				}
			l374:
				{
					position376, tokenIndex376 := position, tokenIndex
					if buffer[position] != rune('l') {
						goto l377
					}
					position++
					goto l376
				l377:
					position, tokenIndex = position376, tokenIndex376
					if buffer[position] != rune('L') {
						goto l368
					}
					position++
				}
			l376:
				{
					position378, tokenIndex378 := position, tokenIndex
					if buffer[position] != rune('a') {
						goto l379
					}
					position++
					goto l378
				l379:
					position, tokenIndex = position378, tokenIndex378
					if buffer[position] != rune('A') {
						goto l368
					}
					position++
				}
			l378:
				{
					position380, tokenIndex380 := position, tokenIndex
					if buffer[position] != rune('c') {
						goto l381
					}
					position++
					goto l380
				l381:
					position, tokenIndex = position380, tokenIndex380
					if buffer[position] != rune('C') {
						goto l368
					}
					position++
				}
			l380:
				{
					position382, tokenIndex382 := position, tokenIndex
					if buffer[position] != rune('e') {
						goto l383
					}
					position++
					goto l382
				l383:
					position, tokenIndex = position382, tokenIndex382
					if buffer[position] != rune('E') {
						goto l368
					}
					position++
				}
			l382:
				{
					position384, tokenIndex384 := position, tokenIndex
					if !_rules[ruleLetterOrDigit]() {
						goto l384
					}
					goto l368
				l384:
					position, tokenIndex = position384, tokenIndex384
				}
				if !_rules[ruleSpacing]() {
					goto l368
				}
				add(ruleREPLACE, position369)
			}
			memoize(19, position368, tokenIndex368, true)
			return true
		l368:
			memoize(19, position368, tokenIndex368, false)
			position, tokenIndex = position368, tokenIndex368
			return false
		},
		/* 20 PACKAGE <- <(('p' / 'P') ('a' / 'A') ('c' / 'C') ('k' / 'K') ('a' / 'A') ('g' / 'G') ('e' / 'E') !LetterOrDigit Spacing)> */
		nil,
		/* 21 IS <- <(('i' / 'I') ('s' / 'S') !LetterOrDigit Spacing)> */
		func() bool {
			if memoized, ok := memoization[memoKey{21, position}]; ok {
				return memoizedResult(memoized)
			}
			position386, tokenIndex386 := position, tokenIndex
			{
				position387 := position
				{
					position388, tokenIndex388 := position, tokenIndex
					if buffer[position] != rune('i') {
						goto l389
					}
					position++
					goto l388
				l389:
					position, tokenIndex = position388, tokenIndex388
					if buffer[position] != rune('I') {
						goto l386
					}
					position++
				}
			l388:
				{
					position390, tokenIndex390 := position, tokenIndex
					if buffer[position] != rune('s') {
						goto l391
					}
					position++
					goto l390
				l391:
					position, tokenIndex = position390, tokenIndex390
					if buffer[position] != rune('S') {
						goto l386
					}
					position++
				}
			l390:
				{
					position392, tokenIndex392 := position, tokenIndex
					if !_rules[ruleLetterOrDigit]() {
						goto l392
					}
					goto l386
				l392:
					position, tokenIndex = position392, tokenIndex392
				}
				if !_rules[ruleSpacing]() {
					goto l386
				}
				add(ruleIS, position387)
			}
			memoize(21, position386, tokenIndex386, true)
			return true
		l386:
			memoize(21, position386, tokenIndex386, false)
			position, tokenIndex = position386, tokenIndex386
			return false
		},
		/* 22 BEGIN <- <(('b' / 'B') ('e' / 'E') ('g' / 'G') ('i' / 'I') ('n' / 'N') !LetterOrDigit Spacing)> */
		nil,
		/* 23 END <- <(('e' / 'E') ('n' / 'N') ('d' / 'D') !LetterOrDigit Spacing)> */
		func() bool {
			if memoized, ok := memoization[memoKey{23, position}]; ok {
				return memoizedResult(memoized)
			}
			position394, tokenIndex394 := position, tokenIndex
			{
				position395 := position
				{
					position396, tokenIndex396 := position, tokenIndex
					if buffer[position] != rune('e') {
						goto l397
					}
					position++
					goto l396
				l397:
					position, tokenIndex = position396, tokenIndex396
					if buffer[position] != rune('E') {
						goto l394
					}
					position++
				}
			l396:
				{
					position398, tokenIndex398 := position, tokenIndex
					if buffer[position] != rune('n') {
						goto l399
					}
					position++
					goto l398
				l399:
					position, tokenIndex = position398, tokenIndex398
					if buffer[position] != rune('N') {
						goto l394
					}
					position++
				}
			l398:
				{
					position400, tokenIndex400 := position, tokenIndex
					if buffer[position] != rune('d') {
						goto l401
					}
					position++
					goto l400
				l401:
					position, tokenIndex = position400, tokenIndex400
					if buffer[position] != rune('D') {
						goto l394
					}
					position++
				}
			l400:
				{
					position402, tokenIndex402 := position, tokenIndex
					if !_rules[ruleLetterOrDigit]() {
						goto l402
					}
					goto l394
				l402:
					position, tokenIndex = position402, tokenIndex402
				}
				if !_rules[ruleSpacing]() {
					goto l394
				}
				add(ruleEND, position395)
			}
			memoize(23, position394, tokenIndex394, true)
			return true
		l394:
			memoize(23, position394, tokenIndex394, false)
			position, tokenIndex = position394, tokenIndex394
			return false
		},
		/* 24 PROCEDURE <- <(('p' / 'P') ('r' / 'R') ('o' / 'O') ('c' / 'C') ('e' / 'E') ('d' / 'D') ('u' / 'U') ('r' / 'R') ('e' / 'E') !LetterOrDigit Spacing)> */
		nil,
		/* 25 INTEGER <- <(('i' / 'I') ('n' / 'N') ('t' / 'T') ('e' / 'E') ('g' / 'G') ('e' / 'E') ('r' / 'R') !LetterOrDigit Spacing)> */
		nil,
		/* 26 VARCHAR <- <(('v' / 'V') ('a' / 'A') ('r' / 'R') ('c' / 'C') ('h' / 'H') ('a' / 'A') ('r' / 'R') !LetterOrDigit Spacing)> */
		nil,
		/* 27 VARCHAR2 <- <(('v' / 'V') ('a' / 'A') ('r' / 'R') ('c' / 'C') ('h' / 'H') ('a' / 'A') ('r' / 'R') '2' !LetterOrDigit Spacing)> */
		nil,
		/* 28 SEMI <- <(';' Spacing)> */
		func() bool {
			if memoized, ok := memoization[memoKey{28, position}]; ok {
				return memoizedResult(memoized)
			}
			position407, tokenIndex407 := position, tokenIndex
			{
				position408 := position
				if buffer[position] != rune(';') {
					goto l407
				}
				position++
				if !_rules[ruleSpacing]() {
					goto l407
				}
				add(ruleSEMI, position408)
			}
			memoize(28, position407, tokenIndex407, true)
			return true
		l407:
			memoize(28, position407, tokenIndex407, false)
			position, tokenIndex = position407, tokenIndex407
			return false
		},
		/* 29 EOT <- <!.> */
		nil,
	}
	p.rules = _rules
	return nil
}
