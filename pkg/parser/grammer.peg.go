package parser

// Code generated by ../../../peg/peg -switch -inline -strict -output grammer.peg.go grammer.peg DO NOT EDIT.

import (
	"bytes"
	"fmt"
	"io"
	"os"
	"sort"
	"strconv"
)

const endSymbol rune = 1114112

/* The rule types inferred from the grammar are below. */
type pegRule uint8

const (
	ruleUnknown pegRule = iota
	ruleUnit
	ruleCreatePackageDeclaration
	rulePackageName
	ruleIdentifier
	ruleLetter
	ruleSpacing
	ruleLetterOrDigit
	ruleKeyword
	ruleCREATE
	ruleOR
	ruleREPLACE
	rulePACKAGE
	ruleIS
	ruleEND
	ruleSEMI
	ruleEOT
)

var rul3s = [...]string{
	"Unknown",
	"Unit",
	"CreatePackageDeclaration",
	"PackageName",
	"Identifier",
	"Letter",
	"Spacing",
	"LetterOrDigit",
	"Keyword",
	"CREATE",
	"OR",
	"REPLACE",
	"PACKAGE",
	"IS",
	"END",
	"SEMI",
	"EOT",
}

type token32 struct {
	pegRule
	begin, end uint32
}

func (t *token32) String() string {
	return fmt.Sprintf("\x1B[34m%v\x1B[m %v %v", rul3s[t.pegRule], t.begin, t.end)
}

type node32 struct {
	token32
	up, next *node32
}

func (node *node32) print(w io.Writer, pretty bool, buffer string) {
	var print func(node *node32, depth int)
	print = func(node *node32, depth int) {
		for node != nil {
			for c := 0; c < depth; c++ {
				fmt.Fprintf(w, " ")
			}
			rule := rul3s[node.pegRule]
			quote := strconv.Quote(string(([]rune(buffer)[node.begin:node.end])))
			if !pretty {
				fmt.Fprintf(w, "%v %v\n", rule, quote)
			} else {
				fmt.Fprintf(w, "\x1B[36m%v\x1B[m %v\n", rule, quote)
			}
			if node.up != nil {
				print(node.up, depth+1)
			}
			node = node.next
		}
	}
	print(node, 0)
}

func (node *node32) Print(w io.Writer, buffer string) {
	node.print(w, false, buffer)
}

func (node *node32) PrettyPrint(w io.Writer, buffer string) {
	node.print(w, true, buffer)
}

type tokens32 struct {
	tree []token32
}

func (t *tokens32) Trim(length uint32) {
	t.tree = t.tree[:length]
}

func (t *tokens32) Print() {
	for _, token := range t.tree {
		fmt.Println(token.String())
	}
}

func (t *tokens32) AST() *node32 {
	type element struct {
		node *node32
		down *element
	}
	tokens := t.Tokens()
	var stack *element
	for _, token := range tokens {
		if token.begin == token.end {
			continue
		}
		node := &node32{token32: token}
		for stack != nil && stack.node.begin >= token.begin && stack.node.end <= token.end {
			stack.node.next = node.up
			node.up = stack.node
			stack = stack.down
		}
		stack = &element{node: node, down: stack}
	}
	if stack != nil {
		return stack.node
	}
	return nil
}

func (t *tokens32) PrintSyntaxTree(buffer string) {
	t.AST().Print(os.Stdout, buffer)
}

func (t *tokens32) WriteSyntaxTree(w io.Writer, buffer string) {
	t.AST().Print(w, buffer)
}

func (t *tokens32) PrettyPrintSyntaxTree(buffer string) {
	t.AST().PrettyPrint(os.Stdout, buffer)
}

func (t *tokens32) Add(rule pegRule, begin, end, index uint32) {
	tree, i := t.tree, int(index)
	if i >= len(tree) {
		t.tree = append(tree, token32{pegRule: rule, begin: begin, end: end})
		return
	}
	tree[i] = token32{pegRule: rule, begin: begin, end: end}
}

func (t *tokens32) Tokens() []token32 {
	return t.tree
}

type SqlParser struct {
	Buffer         string
	buffer         []rune
	rules          [17]func() bool
	parse          func(rule ...int) error
	reset          func()
	Pretty         bool
	disableMemoize bool
	tokens32
}

func (p *SqlParser) Parse(rule ...int) error {
	return p.parse(rule...)
}

func (p *SqlParser) Reset() {
	p.reset()
}

type textPosition struct {
	line, symbol int
}

type textPositionMap map[int]textPosition

func translatePositions(buffer []rune, positions []int) textPositionMap {
	length, translations, j, line, symbol := len(positions), make(textPositionMap, len(positions)), 0, 1, 0
	sort.Ints(positions)

search:
	for i, c := range buffer {
		if c == '\n' {
			line, symbol = line+1, 0
		} else {
			symbol++
		}
		if i == positions[j] {
			translations[positions[j]] = textPosition{line, symbol}
			for j++; j < length; j++ {
				if i != positions[j] {
					continue search
				}
			}
			break search
		}
	}

	return translations
}

type parseError struct {
	p   *SqlParser
	max token32
}

func (e *parseError) Error() string {
	tokens, err := []token32{e.max}, "\n"
	positions, p := make([]int, 2*len(tokens)), 0
	for _, token := range tokens {
		positions[p], p = int(token.begin), p+1
		positions[p], p = int(token.end), p+1
	}
	translations := translatePositions(e.p.buffer, positions)
	format := "parse error near %v (line %v symbol %v - line %v symbol %v):\n%v\n"
	if e.p.Pretty {
		format = "parse error near \x1B[34m%v\x1B[m (line %v symbol %v - line %v symbol %v):\n%v\n"
	}
	for _, token := range tokens {
		begin, end := int(token.begin), int(token.end)
		err += fmt.Sprintf(format,
			rul3s[token.pegRule],
			translations[begin].line, translations[begin].symbol,
			translations[end].line, translations[end].symbol,
			strconv.Quote(string(e.p.buffer[begin:end])))
	}

	return err
}

func (p *SqlParser) PrintSyntaxTree() {
	if p.Pretty {
		p.tokens32.PrettyPrintSyntaxTree(p.Buffer)
	} else {
		p.tokens32.PrintSyntaxTree(p.Buffer)
	}
}

func (p *SqlParser) WriteSyntaxTree(w io.Writer) {
	p.tokens32.WriteSyntaxTree(w, p.Buffer)
}

func (p *SqlParser) SprintSyntaxTree() string {
	var b bytes.Buffer
	p.WriteSyntaxTree(&b)
	return b.String()
}

func Pretty(pretty bool) func(*SqlParser) error {
	return func(p *SqlParser) error {
		p.Pretty = pretty
		return nil
	}
}

func Size(size int) func(*SqlParser) error {
	return func(p *SqlParser) error {
		p.tokens32 = tokens32{tree: make([]token32, 0, size)}
		return nil
	}
}

func DisableMemoize() func(*SqlParser) error {
	return func(p *SqlParser) error {
		p.disableMemoize = true
		return nil
	}
}

type memo struct {
	Matched bool
	Partial []token32
}

type memoKey struct {
	Rule     uint32
	Position uint32
}

func (p *SqlParser) Init(options ...func(*SqlParser) error) error {
	var (
		max                  token32
		position, tokenIndex uint32
		buffer               []rune
		memoization          map[memoKey]memo
	)
	for _, option := range options {
		err := option(p)
		if err != nil {
			return err
		}
	}
	p.reset = func() {
		max = token32{}
		position, tokenIndex = 0, 0
		memoization = make(map[memoKey]memo)
		p.buffer = []rune(p.Buffer)
		if len(p.buffer) == 0 || p.buffer[len(p.buffer)-1] != endSymbol {
			p.buffer = append(p.buffer, endSymbol)
		}
		buffer = p.buffer
	}
	p.reset()

	_rules := p.rules
	tree := p.tokens32
	p.parse = func(rule ...int) error {
		r := 1
		if len(rule) > 0 {
			r = rule[0]
		}
		matches := p.rules[r]()
		p.tokens32 = tree
		if matches {
			p.Trim(tokenIndex)
			return nil
		}
		return &parseError{p, max}
	}

	add := func(rule pegRule, begin uint32) {
		tree.Add(rule, begin, position, tokenIndex)
		tokenIndex++
		if begin != position && position > max.end {
			max = token32{rule, begin, position}
		}
	}

	memoize := func(rule uint32, begin uint32, tokenIndexStart uint32, matched bool) {
		if p.disableMemoize {
			return
		}
		key := memoKey{rule, begin}
		if !matched {
			memoization[key] = memo{Matched: false}
		} else {
			t := tree.tree[tokenIndexStart:tokenIndex]
			tokenCopy := make([]token32, len(t))
			copy(tokenCopy, t)
			memoization[key] = memo{Matched: true, Partial: tokenCopy}
		}
	}

	memoizedResult := func(m memo) bool {
		if !m.Matched {
			return false
		}
		tree.tree = append(tree.tree[:tokenIndex], m.Partial...)
		tokenIndex += uint32(len(m.Partial))
		position = m.Partial[len(m.Partial)-1].end
		if tree.tree[tokenIndex-1].begin != position && position > max.end {
			max = tree.tree[tokenIndex-1]
		}
		return true
	}

	matchDot := func() bool {
		if buffer[position] != endSymbol {
			position++
			return true
		}
		return false
	}

	/*matchChar := func(c byte) bool {
		if buffer[position] == c {
			position++
			return true
		}
		return false
	}*/

	/*matchRange := func(lower byte, upper byte) bool {
		if c := buffer[position]; c >= lower && c <= upper {
			position++
			return true
		}
		return false
	}*/

	_rules = [...]func() bool{
		nil,
		/* 0 Unit <- <(Spacing CreatePackageDeclaration EOT)> */
		func() bool {
			if memoized, ok := memoization[memoKey{0, position}]; ok {
				return memoizedResult(memoized)
			}
			position0, tokenIndex0 := position, tokenIndex
			{
				position1 := position
				if !_rules[ruleSpacing]() {
					goto l0
				}
				{
					position2 := position
					{
						position3 := position
						{
							position4, tokenIndex4 := position, tokenIndex
							if buffer[position] != rune('c') {
								goto l5
							}
							position++
							goto l4
						l5:
							position, tokenIndex = position4, tokenIndex4
							if buffer[position] != rune('C') {
								goto l0
							}
							position++
						}
					l4:
						{
							position6, tokenIndex6 := position, tokenIndex
							if buffer[position] != rune('r') {
								goto l7
							}
							position++
							goto l6
						l7:
							position, tokenIndex = position6, tokenIndex6
							if buffer[position] != rune('R') {
								goto l0
							}
							position++
						}
					l6:
						{
							position8, tokenIndex8 := position, tokenIndex
							if buffer[position] != rune('e') {
								goto l9
							}
							position++
							goto l8
						l9:
							position, tokenIndex = position8, tokenIndex8
							if buffer[position] != rune('E') {
								goto l0
							}
							position++
						}
					l8:
						{
							position10, tokenIndex10 := position, tokenIndex
							if buffer[position] != rune('a') {
								goto l11
							}
							position++
							goto l10
						l11:
							position, tokenIndex = position10, tokenIndex10
							if buffer[position] != rune('A') {
								goto l0
							}
							position++
						}
					l10:
						{
							position12, tokenIndex12 := position, tokenIndex
							if buffer[position] != rune('t') {
								goto l13
							}
							position++
							goto l12
						l13:
							position, tokenIndex = position12, tokenIndex12
							if buffer[position] != rune('T') {
								goto l0
							}
							position++
						}
					l12:
						{
							position14, tokenIndex14 := position, tokenIndex
							if buffer[position] != rune('e') {
								goto l15
							}
							position++
							goto l14
						l15:
							position, tokenIndex = position14, tokenIndex14
							if buffer[position] != rune('E') {
								goto l0
							}
							position++
						}
					l14:
						{
							position16, tokenIndex16 := position, tokenIndex
							if !_rules[ruleLetterOrDigit]() {
								goto l16
							}
							goto l0
						l16:
							position, tokenIndex = position16, tokenIndex16
						}
						if !_rules[ruleSpacing]() {
							goto l0
						}
						add(ruleCREATE, position3)
					}
					{
						position17, tokenIndex17 := position, tokenIndex
						{
							position19 := position
							{
								position20, tokenIndex20 := position, tokenIndex
								if buffer[position] != rune('o') {
									goto l21
								}
								position++
								goto l20
							l21:
								position, tokenIndex = position20, tokenIndex20
								if buffer[position] != rune('O') {
									goto l17
								}
								position++
							}
						l20:
							{
								position22, tokenIndex22 := position, tokenIndex
								if buffer[position] != rune('r') {
									goto l23
								}
								position++
								goto l22
							l23:
								position, tokenIndex = position22, tokenIndex22
								if buffer[position] != rune('R') {
									goto l17
								}
								position++
							}
						l22:
							{
								position24, tokenIndex24 := position, tokenIndex
								if !_rules[ruleLetterOrDigit]() {
									goto l24
								}
								goto l17
							l24:
								position, tokenIndex = position24, tokenIndex24
							}
							if !_rules[ruleSpacing]() {
								goto l17
							}
							add(ruleOR, position19)
						}
						{
							position25 := position
							{
								position26, tokenIndex26 := position, tokenIndex
								if buffer[position] != rune('r') {
									goto l27
								}
								position++
								goto l26
							l27:
								position, tokenIndex = position26, tokenIndex26
								if buffer[position] != rune('R') {
									goto l17
								}
								position++
							}
						l26:
							{
								position28, tokenIndex28 := position, tokenIndex
								if buffer[position] != rune('e') {
									goto l29
								}
								position++
								goto l28
							l29:
								position, tokenIndex = position28, tokenIndex28
								if buffer[position] != rune('E') {
									goto l17
								}
								position++
							}
						l28:
							{
								position30, tokenIndex30 := position, tokenIndex
								if buffer[position] != rune('p') {
									goto l31
								}
								position++
								goto l30
							l31:
								position, tokenIndex = position30, tokenIndex30
								if buffer[position] != rune('P') {
									goto l17
								}
								position++
							}
						l30:
							{
								position32, tokenIndex32 := position, tokenIndex
								if buffer[position] != rune('l') {
									goto l33
								}
								position++
								goto l32
							l33:
								position, tokenIndex = position32, tokenIndex32
								if buffer[position] != rune('L') {
									goto l17
								}
								position++
							}
						l32:
							{
								position34, tokenIndex34 := position, tokenIndex
								if buffer[position] != rune('a') {
									goto l35
								}
								position++
								goto l34
							l35:
								position, tokenIndex = position34, tokenIndex34
								if buffer[position] != rune('A') {
									goto l17
								}
								position++
							}
						l34:
							{
								position36, tokenIndex36 := position, tokenIndex
								if buffer[position] != rune('c') {
									goto l37
								}
								position++
								goto l36
							l37:
								position, tokenIndex = position36, tokenIndex36
								if buffer[position] != rune('C') {
									goto l17
								}
								position++
							}
						l36:
							{
								position38, tokenIndex38 := position, tokenIndex
								if buffer[position] != rune('e') {
									goto l39
								}
								position++
								goto l38
							l39:
								position, tokenIndex = position38, tokenIndex38
								if buffer[position] != rune('E') {
									goto l17
								}
								position++
							}
						l38:
							{
								position40, tokenIndex40 := position, tokenIndex
								if !_rules[ruleLetterOrDigit]() {
									goto l40
								}
								goto l17
							l40:
								position, tokenIndex = position40, tokenIndex40
							}
							if !_rules[ruleSpacing]() {
								goto l17
							}
							add(ruleREPLACE, position25)
						}
						goto l18
					l17:
						position, tokenIndex = position17, tokenIndex17
					}
				l18:
					{
						position41 := position
						{
							position42, tokenIndex42 := position, tokenIndex
							if buffer[position] != rune('p') {
								goto l43
							}
							position++
							goto l42
						l43:
							position, tokenIndex = position42, tokenIndex42
							if buffer[position] != rune('P') {
								goto l0
							}
							position++
						}
					l42:
						{
							position44, tokenIndex44 := position, tokenIndex
							if buffer[position] != rune('a') {
								goto l45
							}
							position++
							goto l44
						l45:
							position, tokenIndex = position44, tokenIndex44
							if buffer[position] != rune('A') {
								goto l0
							}
							position++
						}
					l44:
						{
							position46, tokenIndex46 := position, tokenIndex
							if buffer[position] != rune('c') {
								goto l47
							}
							position++
							goto l46
						l47:
							position, tokenIndex = position46, tokenIndex46
							if buffer[position] != rune('C') {
								goto l0
							}
							position++
						}
					l46:
						{
							position48, tokenIndex48 := position, tokenIndex
							if buffer[position] != rune('k') {
								goto l49
							}
							position++
							goto l48
						l49:
							position, tokenIndex = position48, tokenIndex48
							if buffer[position] != rune('K') {
								goto l0
							}
							position++
						}
					l48:
						{
							position50, tokenIndex50 := position, tokenIndex
							if buffer[position] != rune('a') {
								goto l51
							}
							position++
							goto l50
						l51:
							position, tokenIndex = position50, tokenIndex50
							if buffer[position] != rune('A') {
								goto l0
							}
							position++
						}
					l50:
						{
							position52, tokenIndex52 := position, tokenIndex
							if buffer[position] != rune('g') {
								goto l53
							}
							position++
							goto l52
						l53:
							position, tokenIndex = position52, tokenIndex52
							if buffer[position] != rune('G') {
								goto l0
							}
							position++
						}
					l52:
						{
							position54, tokenIndex54 := position, tokenIndex
							if buffer[position] != rune('e') {
								goto l55
							}
							position++
							goto l54
						l55:
							position, tokenIndex = position54, tokenIndex54
							if buffer[position] != rune('E') {
								goto l0
							}
							position++
						}
					l54:
						{
							position56, tokenIndex56 := position, tokenIndex
							if !_rules[ruleLetterOrDigit]() {
								goto l56
							}
							goto l0
						l56:
							position, tokenIndex = position56, tokenIndex56
						}
						if !_rules[ruleSpacing]() {
							goto l0
						}
						add(rulePACKAGE, position41)
					}
					{
						position57 := position
						{
							position58 := position
							{
								position59, tokenIndex59 := position, tokenIndex
								{
									position60 := position
									{
										switch buffer[position] {
										case 'E', 'e':
											{
												position62, tokenIndex62 := position, tokenIndex
												if buffer[position] != rune('e') {
													goto l63
												}
												position++
												goto l62
											l63:
												position, tokenIndex = position62, tokenIndex62
												if buffer[position] != rune('E') {
													goto l59
												}
												position++
											}
										l62:
											{
												position64, tokenIndex64 := position, tokenIndex
												if buffer[position] != rune('n') {
													goto l65
												}
												position++
												goto l64
											l65:
												position, tokenIndex = position64, tokenIndex64
												if buffer[position] != rune('N') {
													goto l59
												}
												position++
											}
										l64:
											{
												position66, tokenIndex66 := position, tokenIndex
												if buffer[position] != rune('d') {
													goto l67
												}
												position++
												goto l66
											l67:
												position, tokenIndex = position66, tokenIndex66
												if buffer[position] != rune('D') {
													goto l59
												}
												position++
											}
										l66:
											break
										case 'I', 'i':
											{
												position68, tokenIndex68 := position, tokenIndex
												if buffer[position] != rune('i') {
													goto l69
												}
												position++
												goto l68
											l69:
												position, tokenIndex = position68, tokenIndex68
												if buffer[position] != rune('I') {
													goto l59
												}
												position++
											}
										l68:
											{
												position70, tokenIndex70 := position, tokenIndex
												if buffer[position] != rune('s') {
													goto l71
												}
												position++
												goto l70
											l71:
												position, tokenIndex = position70, tokenIndex70
												if buffer[position] != rune('S') {
													goto l59
												}
												position++
											}
										l70:
											break
										case 'P', 'p':
											{
												position72, tokenIndex72 := position, tokenIndex
												if buffer[position] != rune('p') {
													goto l73
												}
												position++
												goto l72
											l73:
												position, tokenIndex = position72, tokenIndex72
												if buffer[position] != rune('P') {
													goto l59
												}
												position++
											}
										l72:
											{
												position74, tokenIndex74 := position, tokenIndex
												if buffer[position] != rune('a') {
													goto l75
												}
												position++
												goto l74
											l75:
												position, tokenIndex = position74, tokenIndex74
												if buffer[position] != rune('A') {
													goto l59
												}
												position++
											}
										l74:
											{
												position76, tokenIndex76 := position, tokenIndex
												if buffer[position] != rune('c') {
													goto l77
												}
												position++
												goto l76
											l77:
												position, tokenIndex = position76, tokenIndex76
												if buffer[position] != rune('C') {
													goto l59
												}
												position++
											}
										l76:
											{
												position78, tokenIndex78 := position, tokenIndex
												if buffer[position] != rune('k') {
													goto l79
												}
												position++
												goto l78
											l79:
												position, tokenIndex = position78, tokenIndex78
												if buffer[position] != rune('K') {
													goto l59
												}
												position++
											}
										l78:
											{
												position80, tokenIndex80 := position, tokenIndex
												if buffer[position] != rune('a') {
													goto l81
												}
												position++
												goto l80
											l81:
												position, tokenIndex = position80, tokenIndex80
												if buffer[position] != rune('A') {
													goto l59
												}
												position++
											}
										l80:
											{
												position82, tokenIndex82 := position, tokenIndex
												if buffer[position] != rune('g') {
													goto l83
												}
												position++
												goto l82
											l83:
												position, tokenIndex = position82, tokenIndex82
												if buffer[position] != rune('G') {
													goto l59
												}
												position++
											}
										l82:
											{
												position84, tokenIndex84 := position, tokenIndex
												if buffer[position] != rune('e') {
													goto l85
												}
												position++
												goto l84
											l85:
												position, tokenIndex = position84, tokenIndex84
												if buffer[position] != rune('E') {
													goto l59
												}
												position++
											}
										l84:
											break
										case 'R', 'r':
											{
												position86, tokenIndex86 := position, tokenIndex
												if buffer[position] != rune('r') {
													goto l87
												}
												position++
												goto l86
											l87:
												position, tokenIndex = position86, tokenIndex86
												if buffer[position] != rune('R') {
													goto l59
												}
												position++
											}
										l86:
											{
												position88, tokenIndex88 := position, tokenIndex
												if buffer[position] != rune('e') {
													goto l89
												}
												position++
												goto l88
											l89:
												position, tokenIndex = position88, tokenIndex88
												if buffer[position] != rune('E') {
													goto l59
												}
												position++
											}
										l88:
											{
												position90, tokenIndex90 := position, tokenIndex
												if buffer[position] != rune('p') {
													goto l91
												}
												position++
												goto l90
											l91:
												position, tokenIndex = position90, tokenIndex90
												if buffer[position] != rune('P') {
													goto l59
												}
												position++
											}
										l90:
											{
												position92, tokenIndex92 := position, tokenIndex
												if buffer[position] != rune('l') {
													goto l93
												}
												position++
												goto l92
											l93:
												position, tokenIndex = position92, tokenIndex92
												if buffer[position] != rune('L') {
													goto l59
												}
												position++
											}
										l92:
											{
												position94, tokenIndex94 := position, tokenIndex
												if buffer[position] != rune('a') {
													goto l95
												}
												position++
												goto l94
											l95:
												position, tokenIndex = position94, tokenIndex94
												if buffer[position] != rune('A') {
													goto l59
												}
												position++
											}
										l94:
											{
												position96, tokenIndex96 := position, tokenIndex
												if buffer[position] != rune('c') {
													goto l97
												}
												position++
												goto l96
											l97:
												position, tokenIndex = position96, tokenIndex96
												if buffer[position] != rune('C') {
													goto l59
												}
												position++
											}
										l96:
											{
												position98, tokenIndex98 := position, tokenIndex
												if buffer[position] != rune('e') {
													goto l99
												}
												position++
												goto l98
											l99:
												position, tokenIndex = position98, tokenIndex98
												if buffer[position] != rune('E') {
													goto l59
												}
												position++
											}
										l98:
											break
										case 'O', 'o':
											{
												position100, tokenIndex100 := position, tokenIndex
												if buffer[position] != rune('o') {
													goto l101
												}
												position++
												goto l100
											l101:
												position, tokenIndex = position100, tokenIndex100
												if buffer[position] != rune('O') {
													goto l59
												}
												position++
											}
										l100:
											{
												position102, tokenIndex102 := position, tokenIndex
												if buffer[position] != rune('r') {
													goto l103
												}
												position++
												goto l102
											l103:
												position, tokenIndex = position102, tokenIndex102
												if buffer[position] != rune('R') {
													goto l59
												}
												position++
											}
										l102:
											break
										default:
											{
												position104, tokenIndex104 := position, tokenIndex
												if buffer[position] != rune('c') {
													goto l105
												}
												position++
												goto l104
											l105:
												position, tokenIndex = position104, tokenIndex104
												if buffer[position] != rune('C') {
													goto l59
												}
												position++
											}
										l104:
											{
												position106, tokenIndex106 := position, tokenIndex
												if buffer[position] != rune('r') {
													goto l107
												}
												position++
												goto l106
											l107:
												position, tokenIndex = position106, tokenIndex106
												if buffer[position] != rune('R') {
													goto l59
												}
												position++
											}
										l106:
											{
												position108, tokenIndex108 := position, tokenIndex
												if buffer[position] != rune('e') {
													goto l109
												}
												position++
												goto l108
											l109:
												position, tokenIndex = position108, tokenIndex108
												if buffer[position] != rune('E') {
													goto l59
												}
												position++
											}
										l108:
											{
												position110, tokenIndex110 := position, tokenIndex
												if buffer[position] != rune('a') {
													goto l111
												}
												position++
												goto l110
											l111:
												position, tokenIndex = position110, tokenIndex110
												if buffer[position] != rune('A') {
													goto l59
												}
												position++
											}
										l110:
											{
												position112, tokenIndex112 := position, tokenIndex
												if buffer[position] != rune('t') {
													goto l113
												}
												position++
												goto l112
											l113:
												position, tokenIndex = position112, tokenIndex112
												if buffer[position] != rune('T') {
													goto l59
												}
												position++
											}
										l112:
											{
												position114, tokenIndex114 := position, tokenIndex
												if buffer[position] != rune('e') {
													goto l115
												}
												position++
												goto l114
											l115:
												position, tokenIndex = position114, tokenIndex114
												if buffer[position] != rune('E') {
													goto l59
												}
												position++
											}
										l114:
											break
										}
									}

									{
										position116, tokenIndex116 := position, tokenIndex
										if !_rules[ruleLetterOrDigit]() {
											goto l116
										}
										goto l59
									l116:
										position, tokenIndex = position116, tokenIndex116
									}
									add(ruleKeyword, position60)
								}
								goto l0
							l59:
								position, tokenIndex = position59, tokenIndex59
							}
							{
								position117 := position
								{
									switch buffer[position] {
									case '$', '_':
										{
											position119, tokenIndex119 := position, tokenIndex
											if buffer[position] != rune('_') {
												goto l120
											}
											position++
											goto l119
										l120:
											position, tokenIndex = position119, tokenIndex119
											if buffer[position] != rune('$') {
												goto l0
											}
											position++
										}
									l119:
										break
									case 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z':
										if c := buffer[position]; c < rune('A') || c > rune('Z') {
											goto l0
										}
										position++
									default:
										if c := buffer[position]; c < rune('a') || c > rune('z') {
											goto l0
										}
										position++
									}
								}

								add(ruleLetter, position117)
							}
						l121:
							{
								position122, tokenIndex122 := position, tokenIndex
								if !_rules[ruleLetterOrDigit]() {
									goto l122
								}
								goto l121
							l122:
								position, tokenIndex = position122, tokenIndex122
							}
							if !_rules[ruleSpacing]() {
								goto l0
							}
							add(ruleIdentifier, position58)
						}
						add(rulePackageName, position57)
					}
					{
						position123 := position
						{
							position124, tokenIndex124 := position, tokenIndex
							if buffer[position] != rune('i') {
								goto l125
							}
							position++
							goto l124
						l125:
							position, tokenIndex = position124, tokenIndex124
							if buffer[position] != rune('I') {
								goto l0
							}
							position++
						}
					l124:
						{
							position126, tokenIndex126 := position, tokenIndex
							if buffer[position] != rune('s') {
								goto l127
							}
							position++
							goto l126
						l127:
							position, tokenIndex = position126, tokenIndex126
							if buffer[position] != rune('S') {
								goto l0
							}
							position++
						}
					l126:
						{
							position128, tokenIndex128 := position, tokenIndex
							if !_rules[ruleLetterOrDigit]() {
								goto l128
							}
							goto l0
						l128:
							position, tokenIndex = position128, tokenIndex128
						}
						if !_rules[ruleSpacing]() {
							goto l0
						}
						add(ruleIS, position123)
					}
					{
						position129 := position
						{
							position130, tokenIndex130 := position, tokenIndex
							if buffer[position] != rune('e') {
								goto l131
							}
							position++
							goto l130
						l131:
							position, tokenIndex = position130, tokenIndex130
							if buffer[position] != rune('E') {
								goto l0
							}
							position++
						}
					l130:
						{
							position132, tokenIndex132 := position, tokenIndex
							if buffer[position] != rune('n') {
								goto l133
							}
							position++
							goto l132
						l133:
							position, tokenIndex = position132, tokenIndex132
							if buffer[position] != rune('N') {
								goto l0
							}
							position++
						}
					l132:
						{
							position134, tokenIndex134 := position, tokenIndex
							if buffer[position] != rune('d') {
								goto l135
							}
							position++
							goto l134
						l135:
							position, tokenIndex = position134, tokenIndex134
							if buffer[position] != rune('D') {
								goto l0
							}
							position++
						}
					l134:
						{
							position136, tokenIndex136 := position, tokenIndex
							if !_rules[ruleLetterOrDigit]() {
								goto l136
							}
							goto l0
						l136:
							position, tokenIndex = position136, tokenIndex136
						}
						if !_rules[ruleSpacing]() {
							goto l0
						}
						add(ruleEND, position129)
					}
					{
						position137 := position
						if buffer[position] != rune(';') {
							goto l0
						}
						position++
						if !_rules[ruleSpacing]() {
							goto l0
						}
						add(ruleSEMI, position137)
					}
					add(ruleCreatePackageDeclaration, position2)
				}
				{
					position138 := position
					{
						position139, tokenIndex139 := position, tokenIndex
						if !matchDot() {
							goto l139
						}
						goto l0
					l139:
						position, tokenIndex = position139, tokenIndex139
					}
					add(ruleEOT, position138)
				}
				add(ruleUnit, position1)
			}
			memoize(0, position0, tokenIndex0, true)
			return true
		l0:
			memoize(0, position0, tokenIndex0, false)
			position, tokenIndex = position0, tokenIndex0
			return false
		},
		/* 1 CreatePackageDeclaration <- <(CREATE (OR REPLACE)? PACKAGE PackageName IS END SEMI)> */
		nil,
		/* 2 PackageName <- <Identifier> */
		nil,
		/* 3 Identifier <- <(!Keyword Letter LetterOrDigit* Spacing)> */
		nil,
		/* 4 Letter <- <((&('$' | '_') ('_' / '$')) | (&('A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z') [A-Z]) | (&('a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v' | 'w' | 'x' | 'y' | 'z') [a-z]))> */
		nil,
		/* 5 Spacing <- <((&('\n') '\n') | (&('\r') '\r') | (&('\t') '\t') | (&(' ') ' '))+*> */
		func() bool {
			if memoized, ok := memoization[memoKey{5, position}]; ok {
				return memoizedResult(memoized)
			}
			position144, tokenIndex144 := position, tokenIndex
			{
				position145 := position
			l146:
				{
					position147, tokenIndex147 := position, tokenIndex
					{
						switch buffer[position] {
						case '\n':
							if buffer[position] != rune('\n') {
								goto l147
							}
							position++
						case '\r':
							if buffer[position] != rune('\r') {
								goto l147
							}
							position++
						case '\t':
							if buffer[position] != rune('\t') {
								goto l147
							}
							position++
						default:
							if buffer[position] != rune(' ') {
								goto l147
							}
							position++
						}
					}

				l148:
					{
						position149, tokenIndex149 := position, tokenIndex
						{
							switch buffer[position] {
							case '\n':
								if buffer[position] != rune('\n') {
									goto l149
								}
								position++
							case '\r':
								if buffer[position] != rune('\r') {
									goto l149
								}
								position++
							case '\t':
								if buffer[position] != rune('\t') {
									goto l149
								}
								position++
							default:
								if buffer[position] != rune(' ') {
									goto l149
								}
								position++
							}
						}

						goto l148
					l149:
						position, tokenIndex = position149, tokenIndex149
					}
					goto l146
				l147:
					position, tokenIndex = position147, tokenIndex147
				}
				add(ruleSpacing, position145)
			}
			memoize(5, position144, tokenIndex144, true)
			return true
		},
		/* 6 LetterOrDigit <- <((&('$' | '_') ('_' / '$')) | (&('0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9') [0-9]) | (&('A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z') [A-Z]) | (&('a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v' | 'w' | 'x' | 'y' | 'z') [a-z]))> */
		func() bool {
			if memoized, ok := memoization[memoKey{6, position}]; ok {
				return memoizedResult(memoized)
			}
			position152, tokenIndex152 := position, tokenIndex
			{
				position153 := position
				{
					switch buffer[position] {
					case '$', '_':
						{
							position155, tokenIndex155 := position, tokenIndex
							if buffer[position] != rune('_') {
								goto l156
							}
							position++
							goto l155
						l156:
							position, tokenIndex = position155, tokenIndex155
							if buffer[position] != rune('$') {
								goto l152
							}
							position++
						}
					l155:
						break
					case '0', '1', '2', '3', '4', '5', '6', '7', '8', '9':
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l152
						}
						position++
					case 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z':
						if c := buffer[position]; c < rune('A') || c > rune('Z') {
							goto l152
						}
						position++
					default:
						if c := buffer[position]; c < rune('a') || c > rune('z') {
							goto l152
						}
						position++
					}
				}

				add(ruleLetterOrDigit, position153)
			}
			memoize(6, position152, tokenIndex152, true)
			return true
		l152:
			memoize(6, position152, tokenIndex152, false)
			position, tokenIndex = position152, tokenIndex152
			return false
		},
		/* 7 Keyword <- <(((&('E' | 'e') (('e' / 'E') ('n' / 'N') ('d' / 'D'))) | (&('I' | 'i') (('i' / 'I') ('s' / 'S'))) | (&('P' | 'p') (('p' / 'P') ('a' / 'A') ('c' / 'C') ('k' / 'K') ('a' / 'A') ('g' / 'G') ('e' / 'E'))) | (&('R' | 'r') (('r' / 'R') ('e' / 'E') ('p' / 'P') ('l' / 'L') ('a' / 'A') ('c' / 'C') ('e' / 'E'))) | (&('O' | 'o') (('o' / 'O') ('r' / 'R'))) | (&('C' | 'c') (('c' / 'C') ('r' / 'R') ('e' / 'E') ('a' / 'A') ('t' / 'T') ('e' / 'E')))) !LetterOrDigit)> */
		nil,
		/* 8 CREATE <- <(('c' / 'C') ('r' / 'R') ('e' / 'E') ('a' / 'A') ('t' / 'T') ('e' / 'E') !LetterOrDigit Spacing)> */
		nil,
		/* 9 OR <- <(('o' / 'O') ('r' / 'R') !LetterOrDigit Spacing)> */
		nil,
		/* 10 REPLACE <- <(('r' / 'R') ('e' / 'E') ('p' / 'P') ('l' / 'L') ('a' / 'A') ('c' / 'C') ('e' / 'E') !LetterOrDigit Spacing)> */
		nil,
		/* 11 PACKAGE <- <(('p' / 'P') ('a' / 'A') ('c' / 'C') ('k' / 'K') ('a' / 'A') ('g' / 'G') ('e' / 'E') !LetterOrDigit Spacing)> */
		nil,
		/* 12 IS <- <(('i' / 'I') ('s' / 'S') !LetterOrDigit Spacing)> */
		nil,
		/* 13 END <- <(('e' / 'E') ('n' / 'N') ('d' / 'D') !LetterOrDigit Spacing)> */
		nil,
		/* 14 SEMI <- <(';' Spacing)> */
		nil,
		/* 15 EOT <- <!.> */
		nil,
	}
	p.rules = _rules
	return nil
}
