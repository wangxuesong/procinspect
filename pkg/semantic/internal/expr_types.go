package main

var exprTypes = Types{{
	Name:    "AliasExpression",
	Fields:  "semantic.AliasExpression",
	Comment: "",
}, {
	Name:    "BetweenExpression",
	Fields:  "semantic.BetweenExpression",
	Comment: "",
}, {
	Name:    "BinaryExpression",
	Fields:  "semantic.BinaryExpression",
	Comment: "",
}, {
	Name:    "BindNameExpression",
	Fields:  "semantic.BindNameExpression",
	Comment: "",
}, {
	Name:    "CastExpression",
	Fields:  "semantic.CastExpression",
	Comment: "",
}, {
	Name:    "CommonTableExpression",
	Fields:  "semantic.CommonTableExpression",
	Comment: "",
}, {
	Name:    "CursorAttribute",
	Fields:  "semantic.CursorAttribute",
	Comment: "",
}, {
	Name:    "DotExpression",
	Fields:  "semantic.DotExpression",
	Comment: "",
}, {
	Name:    "ExistsExpression",
	Fields:  "semantic.ExistsExpression",
	Comment: "",
}, {
	Name:    "ExprListExpression",
	Fields:  "semantic.ExprListExpression",
	Comment: "",
}, {
	Name:    "ForUpdateOptionsExpression",
	Fields:  "semantic.ForUpdateOptionsExpression",
	Comment: "",
}, {
	Name:    "FunctionCallExpression",
	Fields:  "semantic.FunctionCallExpression",
	Comment: "",
}, {
	Name:    "InExpression",
	Fields:  "semantic.InExpression",
	Comment: "",
}, {
	Name:    "LikeExpression",
	Fields:  "semantic.LikeExpression",
	Comment: "",
}, {
	Name:    "ListaggExpression",
	Fields:  "semantic.ListaggExpression",
	Comment: "",
}, {
	Name:    "NameExpression",
	Fields:  "semantic.NameExpression",
	Comment: "",
}, {
	Name:    "NamedArgumentExpression",
	Fields:  "semantic.NamedArgumentExpression",
	Comment: "",
}, {
	Name:    "NullExpression",
	Fields:  "semantic.NullExpression",
	Comment: "",
}, {
	Name:    "NumericLiteral",
	Fields:  "semantic.NumericLiteral",
	Comment: "",
}, {
	Name:    "OrderByClause",
	Fields:  "semantic.OrderByClause",
	Comment: "",
}, {
	Name:    "OrderByElement",
	Fields:  "semantic.OrderByElement",
	Comment: "",
}, {
	Name:    "OuterJoinExpression",
	Fields:  "semantic.OuterJoinExpression",
	Comment: "",
}, {
	Name:    "QueryExpression",
	Fields:  "semantic.QueryExpression",
	Comment: "",
}, {
	Name:    "RelationalExpression",
	Fields:  "semantic.RelationalExpression",
	Comment: "",
}, {
	Name:    "SignExpression",
	Fields:  "semantic.SignExpression",
	Comment: "",
}, {
	Name:    "StatementExpression",
	Fields:  "semantic.StatementExpression",
	Comment: "",
}, {
	Name:    "StringLiteral",
	Fields:  "semantic.StringLiteral",
	Comment: "",
}, {
	Name:    "UnaryLogicalExpression",
	Fields:  "semantic.UnaryLogicalExpression",
	Comment: "",
}, {
	Name:    "UsingClause",
	Fields:  "semantic.UsingClause",
	Comment: "",
}, {
	Name:    "UsingElement",
	Fields:  "semantic.UsingElement",
	Comment: "",
}}
